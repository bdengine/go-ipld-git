package ipldgit

// Code generated by go-ipld-prime gengo.  DO NOT EDIT.

import (
	ipld "github.com/ipld/go-ipld-prime"
	"github.com/ipld/go-ipld-prime/node/mixins"
	"github.com/ipld/go-ipld-prime/schema"
)

func (n Blob) Bytes() []byte {
	return n.x
}
func (_Blob__Prototype) FromBytes(v []byte) (Blob, error) {
	n := _Blob{v}
	return &n, nil
}
type _Blob__Maybe struct {
	m schema.Maybe
	v Blob
}
type MaybeBlob = *_Blob__Maybe

func (m MaybeBlob) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeBlob) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeBlob) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeBlob) AsNode() ipld.Node {
	switch m.m {
		case schema.Maybe_Absent:
			return ipld.Absent
		case schema.Maybe_Null:
			return ipld.Null
		case schema.Maybe_Value:
			return m.v
		default:
			panic("unreachable")
	}
}
func (m MaybeBlob) Must() Blob {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}
var _ ipld.Node = (Blob)(&_Blob{})
var _ schema.TypedNode = (Blob)(&_Blob{})
func (Blob) Kind() ipld.Kind {
	return ipld.Kind_Bytes
}
func (Blob) LookupByString(string) (ipld.Node, error) {
	return mixins.Bytes{"ipldgit.Blob"}.LookupByString("")
}
func (Blob) LookupByNode(ipld.Node) (ipld.Node, error) {
	return mixins.Bytes{"ipldgit.Blob"}.LookupByNode(nil)
}
func (Blob) LookupByIndex(idx int64) (ipld.Node, error) {
	return mixins.Bytes{"ipldgit.Blob"}.LookupByIndex(0)
}
func (Blob) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return mixins.Bytes{"ipldgit.Blob"}.LookupBySegment(seg)
}
func (Blob) MapIterator() ipld.MapIterator {
	return nil
}
func (Blob) ListIterator() ipld.ListIterator {
	return nil
}
func (Blob) Length() int64 {
	return -1
}
func (Blob) IsAbsent() bool {
	return false
}
func (Blob) IsNull() bool {
	return false
}
func (Blob) AsBool() (bool, error) {
	return mixins.Bytes{"ipldgit.Blob"}.AsBool()
}
func (Blob) AsInt() (int64, error) {
	return mixins.Bytes{"ipldgit.Blob"}.AsInt()
}
func (Blob) AsFloat() (float64, error) {
	return mixins.Bytes{"ipldgit.Blob"}.AsFloat()
}
func (Blob) AsString() (string, error) {
	return mixins.Bytes{"ipldgit.Blob"}.AsString()
}
func (n Blob) AsBytes() ([]byte, error) {
	return n.x, nil
}
func (Blob) AsLink() (ipld.Link, error) {
	return mixins.Bytes{"ipldgit.Blob"}.AsLink()
}
func (Blob) Prototype() ipld.NodePrototype {
	return _Blob__Prototype{}
}
type _Blob__Prototype struct{}

func (_Blob__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _Blob__Builder
	nb.Reset()
	return &nb
}
type _Blob__Builder struct {
	_Blob__Assembler
}
func (nb *_Blob__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Blob__Builder) Reset() {
	var w _Blob
	var m schema.Maybe
	*nb = _Blob__Builder{_Blob__Assembler{w: &w, m: &m}}
}
type _Blob__Assembler struct {
	w *_Blob
	m *schema.Maybe
}

func (na *_Blob__Assembler) reset() {}
func (_Blob__Assembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	return mixins.BytesAssembler{"ipldgit.Blob"}.BeginMap(0)
}
func (_Blob__Assembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.BytesAssembler{"ipldgit.Blob"}.BeginList(0)
}
func (na *_Blob__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.BytesAssembler{"ipldgit.Blob"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	panic("unreachable")
}
func (_Blob__Assembler) AssignBool(bool) error {
	return mixins.BytesAssembler{"ipldgit.Blob"}.AssignBool(false)
}
func (_Blob__Assembler) AssignInt(int64) error {
	return mixins.BytesAssembler{"ipldgit.Blob"}.AssignInt(0)
}
func (_Blob__Assembler) AssignFloat(float64) error {
	return mixins.BytesAssembler{"ipldgit.Blob"}.AssignFloat(0)
}
func (_Blob__Assembler) AssignString(string) error {
	return mixins.BytesAssembler{"ipldgit.Blob"}.AssignString("")
}
func (na *_Blob__Assembler) AssignBytes(v []byte) error {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	if na.w == nil {
		na.w = &_Blob{}
	}
	na.w.x = v
	*na.m = schema.Maybe_Value
	return nil
}
func (_Blob__Assembler) AssignLink(ipld.Link) error {
	return mixins.BytesAssembler{"ipldgit.Blob"}.AssignLink(nil)
}
func (na *_Blob__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Blob); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v2, err := v.AsBytes(); err != nil {
		return err
	} else {
		return na.AssignBytes(v2)
	}
}
func (_Blob__Assembler) Prototype() ipld.NodePrototype {
	return _Blob__Prototype{}
}
func (Blob) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n Blob) Representation() ipld.Node {
	return (*_Blob__Repr)(n)
}
type _Blob__Repr = _Blob
var _ ipld.Node = &_Blob__Repr{}
type _Blob__ReprPrototype = _Blob__Prototype
type _Blob__ReprAssembler = _Blob__Assembler


func (n _Commit) FieldDataSize() String {
	return &n.DataSize
}
func (n _Commit) FieldGitTree() LinkTree {
	return &n.GitTree
}
func (n _Commit) FieldParents() ListParents {
	return &n.Parents
}
func (n _Commit) FieldMessage() String {
	return &n.Message
}
func (n _Commit) FieldAuthor() MaybePersonInfo {
	return &n.Author
}
func (n _Commit) FieldCommitter() MaybePersonInfo {
	return &n.Committer
}
func (n _Commit) FieldEncoding() MaybeString {
	return &n.Encoding
}
func (n _Commit) FieldSig() MaybeGpgSig {
	return &n.Sig
}
func (n _Commit) FieldMergeTag() ListTag {
	return &n.MergeTag
}
func (n _Commit) FieldOther() ListString {
	return &n.Other
}
type _Commit__Maybe struct {
	m schema.Maybe
	v Commit
}
type MaybeCommit = *_Commit__Maybe

func (m MaybeCommit) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeCommit) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeCommit) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeCommit) AsNode() ipld.Node {
	switch m.m {
		case schema.Maybe_Absent:
			return ipld.Absent
		case schema.Maybe_Null:
			return ipld.Null
		case schema.Maybe_Value:
			return m.v
		default:
			panic("unreachable")
	}
}
func (m MaybeCommit) Must() Commit {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}
var (
	fieldName__Commit_DataSize = _String{"DataSize"}
	fieldName__Commit_GitTree = _String{"GitTree"}
	fieldName__Commit_Parents = _String{"Parents"}
	fieldName__Commit_Message = _String{"Message"}
	fieldName__Commit_Author = _String{"Author"}
	fieldName__Commit_Committer = _String{"Committer"}
	fieldName__Commit_Encoding = _String{"Encoding"}
	fieldName__Commit_Sig = _String{"Sig"}
	fieldName__Commit_MergeTag = _String{"MergeTag"}
	fieldName__Commit_Other = _String{"Other"}
)
var _ ipld.Node = (Commit)(&_Commit{})
var _ schema.TypedNode = (Commit)(&_Commit{})
func (Commit) Kind() ipld.Kind {
	return ipld.Kind_Map
}
func (n Commit) LookupByString(key string) (ipld.Node, error) {
	switch key {
	case "DataSize":
		return &n.DataSize, nil
	case "GitTree":
		return &n.GitTree, nil
	case "Parents":
		return &n.Parents, nil
	case "Message":
		return &n.Message, nil
	case "Author":
		if n.Author.m == schema.Maybe_Absent {
			return ipld.Absent, nil
		}
		return n.Author.v, nil
	case "Committer":
		if n.Committer.m == schema.Maybe_Absent {
			return ipld.Absent, nil
		}
		return n.Committer.v, nil
	case "Encoding":
		if n.Encoding.m == schema.Maybe_Absent {
			return ipld.Absent, nil
		}
		return n.Encoding.v, nil
	case "Sig":
		if n.Sig.m == schema.Maybe_Absent {
			return ipld.Absent, nil
		}
		return n.Sig.v, nil
	case "MergeTag":
		return &n.MergeTag, nil
	case "Other":
		return &n.Other, nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfString(key)}
	}
}
func (n Commit) LookupByNode(key ipld.Node) (ipld.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (Commit) LookupByIndex(idx int64) (ipld.Node, error) {
	return mixins.Map{"ipldgit.Commit"}.LookupByIndex(0)
}
func (n Commit) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return n.LookupByString(seg.String())
}
func (n Commit) MapIterator() ipld.MapIterator {
	return &_Commit__MapItr{n, 0}
}

type _Commit__MapItr struct {
	n Commit
	idx  int
}

func (itr *_Commit__MapItr) Next() (k ipld.Node, v ipld.Node, _ error) {
	if itr.idx >= 10 {
		return nil, nil, ipld.ErrIteratorOverread{}
	}
	switch itr.idx {
	case 0:
		k = &fieldName__Commit_DataSize
		v = &itr.n.DataSize
	case 1:
		k = &fieldName__Commit_GitTree
		v = &itr.n.GitTree
	case 2:
		k = &fieldName__Commit_Parents
		v = &itr.n.Parents
	case 3:
		k = &fieldName__Commit_Message
		v = &itr.n.Message
	case 4:
		k = &fieldName__Commit_Author
		if itr.n.Author.m == schema.Maybe_Absent {
			v = ipld.Absent
			break
		}
		v = itr.n.Author.v
	case 5:
		k = &fieldName__Commit_Committer
		if itr.n.Committer.m == schema.Maybe_Absent {
			v = ipld.Absent
			break
		}
		v = itr.n.Committer.v
	case 6:
		k = &fieldName__Commit_Encoding
		if itr.n.Encoding.m == schema.Maybe_Absent {
			v = ipld.Absent
			break
		}
		v = itr.n.Encoding.v
	case 7:
		k = &fieldName__Commit_Sig
		if itr.n.Sig.m == schema.Maybe_Absent {
			v = ipld.Absent
			break
		}
		v = itr.n.Sig.v
	case 8:
		k = &fieldName__Commit_MergeTag
		v = &itr.n.MergeTag
	case 9:
		k = &fieldName__Commit_Other
		v = &itr.n.Other
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_Commit__MapItr) Done() bool {
	return itr.idx >= 10
}

func (Commit) ListIterator() ipld.ListIterator {
	return nil
}
func (Commit) Length() int64 {
	return 10
}
func (Commit) IsAbsent() bool {
	return false
}
func (Commit) IsNull() bool {
	return false
}
func (Commit) AsBool() (bool, error) {
	return mixins.Map{"ipldgit.Commit"}.AsBool()
}
func (Commit) AsInt() (int64, error) {
	return mixins.Map{"ipldgit.Commit"}.AsInt()
}
func (Commit) AsFloat() (float64, error) {
	return mixins.Map{"ipldgit.Commit"}.AsFloat()
}
func (Commit) AsString() (string, error) {
	return mixins.Map{"ipldgit.Commit"}.AsString()
}
func (Commit) AsBytes() ([]byte, error) {
	return mixins.Map{"ipldgit.Commit"}.AsBytes()
}
func (Commit) AsLink() (ipld.Link, error) {
	return mixins.Map{"ipldgit.Commit"}.AsLink()
}
func (Commit) Prototype() ipld.NodePrototype {
	return _Commit__Prototype{}
}
type _Commit__Prototype struct{}

func (_Commit__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _Commit__Builder
	nb.Reset()
	return &nb
}
type _Commit__Builder struct {
	_Commit__Assembler
}
func (nb *_Commit__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Commit__Builder) Reset() {
	var w _Commit
	var m schema.Maybe
	*nb = _Commit__Builder{_Commit__Assembler{w: &w, m: &m}}
}
type _Commit__Assembler struct {
	w *_Commit
	m *schema.Maybe
	state maState
	s int
	f int

	cm schema.Maybe
	ca_DataSize _String__Assembler
	ca_GitTree _LinkTree__Assembler
	ca_Parents _ListParents__Assembler
	ca_Message _String__Assembler
	ca_Author _PersonInfo__Assembler
	ca_Committer _PersonInfo__Assembler
	ca_Encoding _String__Assembler
	ca_Sig _GpgSig__Assembler
	ca_MergeTag _ListTag__Assembler
	ca_Other _ListString__Assembler
	}

func (na *_Commit__Assembler) reset() {
	na.state = maState_initial
	na.s = 0
	na.ca_DataSize.reset()
	na.ca_GitTree.reset()
	na.ca_Parents.reset()
	na.ca_Message.reset()
	na.ca_Author.reset()
	na.ca_Committer.reset()
	na.ca_Encoding.reset()
	na.ca_Sig.reset()
	na.ca_MergeTag.reset()
	na.ca_Other.reset()
}

var (
	fieldBit__Commit_DataSize = 1 << 0
	fieldBit__Commit_GitTree = 1 << 1
	fieldBit__Commit_Parents = 1 << 2
	fieldBit__Commit_Message = 1 << 3
	fieldBit__Commit_Author = 1 << 4
	fieldBit__Commit_Committer = 1 << 5
	fieldBit__Commit_Encoding = 1 << 6
	fieldBit__Commit_Sig = 1 << 7
	fieldBit__Commit_MergeTag = 1 << 8
	fieldBit__Commit_Other = 1 << 9
	fieldBits__Commit_sufficient = 0 + 1 << 0 + 1 << 1 + 1 << 2 + 1 << 3 + 1 << 8 + 1 << 9
)
func (na *_Commit__Assembler) BeginMap(int64) (ipld.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_Commit{}
	}
	return na, nil
}
func (_Commit__Assembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.MapAssembler{"ipldgit.Commit"}.BeginList(0)
}
func (na *_Commit__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{"ipldgit.Commit"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_Commit__Assembler) AssignBool(bool) error {
	return mixins.MapAssembler{"ipldgit.Commit"}.AssignBool(false)
}
func (_Commit__Assembler) AssignInt(int64) error {
	return mixins.MapAssembler{"ipldgit.Commit"}.AssignInt(0)
}
func (_Commit__Assembler) AssignFloat(float64) error {
	return mixins.MapAssembler{"ipldgit.Commit"}.AssignFloat(0)
}
func (_Commit__Assembler) AssignString(string) error {
	return mixins.MapAssembler{"ipldgit.Commit"}.AssignString("")
}
func (_Commit__Assembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{"ipldgit.Commit"}.AssignBytes(nil)
}
func (_Commit__Assembler) AssignLink(ipld.Link) error {
	return mixins.MapAssembler{"ipldgit.Commit"}.AssignLink(nil)
}
func (na *_Commit__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Commit); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != ipld.Kind_Map {
		return ipld.ErrWrongKind{TypeName: "ipldgit.Commit", MethodName: "AssignNode", AppropriateKind: ipld.KindSet_JustMap, ActualKind: v.Kind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_Commit__Assembler) Prototype() ipld.NodePrototype {
	return _Commit__Prototype{}
}
func (ma *_Commit__Assembler) valueFinishTidy() bool {
	switch ma.f {
	case 0:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_DataSize.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 1:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_GitTree.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 2:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_Parents.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 3:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_Message.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 4:
		switch ma.w.Author.m {
		case schema.Maybe_Value:
			ma.w.Author.v = ma.ca_Author.w
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 5:
		switch ma.w.Committer.m {
		case schema.Maybe_Value:
			ma.w.Committer.v = ma.ca_Committer.w
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 6:
		switch ma.w.Encoding.m {
		case schema.Maybe_Value:
			ma.w.Encoding.v = ma.ca_Encoding.w
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 7:
		switch ma.w.Sig.m {
		case schema.Maybe_Value:
			ma.w.Sig.v = ma.ca_Sig.w
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 8:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_MergeTag.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 9:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_Other.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	default:
		panic("unreachable")
	}
}
func (ma *_Commit__Assembler) AssembleEntry(k string) (ipld.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	switch k {
	case "DataSize":
		if ma.s & fieldBit__Commit_DataSize != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__Commit_DataSize}
		}
		ma.s += fieldBit__Commit_DataSize
		ma.state = maState_midValue
		ma.f = 0
		ma.ca_DataSize.w = &ma.w.DataSize
		ma.ca_DataSize.m = &ma.cm
		return &ma.ca_DataSize, nil
	case "GitTree":
		if ma.s & fieldBit__Commit_GitTree != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__Commit_GitTree}
		}
		ma.s += fieldBit__Commit_GitTree
		ma.state = maState_midValue
		ma.f = 1
		ma.ca_GitTree.w = &ma.w.GitTree
		ma.ca_GitTree.m = &ma.cm
		return &ma.ca_GitTree, nil
	case "Parents":
		if ma.s & fieldBit__Commit_Parents != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__Commit_Parents}
		}
		ma.s += fieldBit__Commit_Parents
		ma.state = maState_midValue
		ma.f = 2
		ma.ca_Parents.w = &ma.w.Parents
		ma.ca_Parents.m = &ma.cm
		return &ma.ca_Parents, nil
	case "Message":
		if ma.s & fieldBit__Commit_Message != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__Commit_Message}
		}
		ma.s += fieldBit__Commit_Message
		ma.state = maState_midValue
		ma.f = 3
		ma.ca_Message.w = &ma.w.Message
		ma.ca_Message.m = &ma.cm
		return &ma.ca_Message, nil
	case "Author":
		if ma.s & fieldBit__Commit_Author != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__Commit_Author}
		}
		ma.s += fieldBit__Commit_Author
		ma.state = maState_midValue
		ma.f = 4
		ma.ca_Author.w = ma.w.Author.v
		ma.ca_Author.m = &ma.w.Author.m
		return &ma.ca_Author, nil
	case "Committer":
		if ma.s & fieldBit__Commit_Committer != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__Commit_Committer}
		}
		ma.s += fieldBit__Commit_Committer
		ma.state = maState_midValue
		ma.f = 5
		ma.ca_Committer.w = ma.w.Committer.v
		ma.ca_Committer.m = &ma.w.Committer.m
		return &ma.ca_Committer, nil
	case "Encoding":
		if ma.s & fieldBit__Commit_Encoding != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__Commit_Encoding}
		}
		ma.s += fieldBit__Commit_Encoding
		ma.state = maState_midValue
		ma.f = 6
		ma.ca_Encoding.w = ma.w.Encoding.v
		ma.ca_Encoding.m = &ma.w.Encoding.m
		return &ma.ca_Encoding, nil
	case "Sig":
		if ma.s & fieldBit__Commit_Sig != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__Commit_Sig}
		}
		ma.s += fieldBit__Commit_Sig
		ma.state = maState_midValue
		ma.f = 7
		ma.ca_Sig.w = ma.w.Sig.v
		ma.ca_Sig.m = &ma.w.Sig.m
		return &ma.ca_Sig, nil
	case "MergeTag":
		if ma.s & fieldBit__Commit_MergeTag != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__Commit_MergeTag}
		}
		ma.s += fieldBit__Commit_MergeTag
		ma.state = maState_midValue
		ma.f = 8
		ma.ca_MergeTag.w = &ma.w.MergeTag
		ma.ca_MergeTag.m = &ma.cm
		return &ma.ca_MergeTag, nil
	case "Other":
		if ma.s & fieldBit__Commit_Other != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__Commit_Other}
		}
		ma.s += fieldBit__Commit_Other
		ma.state = maState_midValue
		ma.f = 9
		ma.ca_Other.w = &ma.w.Other
		ma.ca_Other.m = &ma.cm
		return &ma.ca_Other, nil
	default:
		return nil, ipld.ErrInvalidKey{TypeName:"ipldgit.Commit", Key:&_String{k}}
	}
}
func (ma *_Commit__Assembler) AssembleKey() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_Commit__KeyAssembler)(ma)
}
func (ma *_Commit__Assembler) AssembleValue() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.f {
	case 0:
		ma.ca_DataSize.w = &ma.w.DataSize
		ma.ca_DataSize.m = &ma.cm
		return &ma.ca_DataSize
	case 1:
		ma.ca_GitTree.w = &ma.w.GitTree
		ma.ca_GitTree.m = &ma.cm
		return &ma.ca_GitTree
	case 2:
		ma.ca_Parents.w = &ma.w.Parents
		ma.ca_Parents.m = &ma.cm
		return &ma.ca_Parents
	case 3:
		ma.ca_Message.w = &ma.w.Message
		ma.ca_Message.m = &ma.cm
		return &ma.ca_Message
	case 4:
		ma.ca_Author.w = ma.w.Author.v
		ma.ca_Author.m = &ma.w.Author.m
		return &ma.ca_Author
	case 5:
		ma.ca_Committer.w = ma.w.Committer.v
		ma.ca_Committer.m = &ma.w.Committer.m
		return &ma.ca_Committer
	case 6:
		ma.ca_Encoding.w = ma.w.Encoding.v
		ma.ca_Encoding.m = &ma.w.Encoding.m
		return &ma.ca_Encoding
	case 7:
		ma.ca_Sig.w = ma.w.Sig.v
		ma.ca_Sig.m = &ma.w.Sig.m
		return &ma.ca_Sig
	case 8:
		ma.ca_MergeTag.w = &ma.w.MergeTag
		ma.ca_MergeTag.m = &ma.cm
		return &ma.ca_MergeTag
	case 9:
		ma.ca_Other.w = &ma.w.Other
		ma.ca_Other.m = &ma.cm
		return &ma.ca_Other
	default:
		panic("unreachable")
	}
}
func (ma *_Commit__Assembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	if ma.s & fieldBits__Commit_sufficient != fieldBits__Commit_sufficient {
		err := ipld.ErrMissingRequiredField{Missing: make([]string, 0)}
		if ma.s & fieldBit__Commit_DataSize == 0 {
			err.Missing = append(err.Missing, "DataSize")
		}
		if ma.s & fieldBit__Commit_GitTree == 0 {
			err.Missing = append(err.Missing, "GitTree")
		}
		if ma.s & fieldBit__Commit_Parents == 0 {
			err.Missing = append(err.Missing, "Parents")
		}
		if ma.s & fieldBit__Commit_Message == 0 {
			err.Missing = append(err.Missing, "Message")
		}
		if ma.s & fieldBit__Commit_MergeTag == 0 {
			err.Missing = append(err.Missing, "MergeTag")
		}
		if ma.s & fieldBit__Commit_Other == 0 {
			err.Missing = append(err.Missing, "Other")
		}
		return err
	}
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_Commit__Assembler) KeyPrototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (ma *_Commit__Assembler) ValuePrototype(k string) ipld.NodePrototype {
	panic("todo structbuilder mapassembler valueprototype")
}
type _Commit__KeyAssembler _Commit__Assembler
func (_Commit__KeyAssembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	return mixins.StringAssembler{"ipldgit.Commit.KeyAssembler"}.BeginMap(0)
}
func (_Commit__KeyAssembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.StringAssembler{"ipldgit.Commit.KeyAssembler"}.BeginList(0)
}
func (na *_Commit__KeyAssembler) AssignNull() error {
	return mixins.StringAssembler{"ipldgit.Commit.KeyAssembler"}.AssignNull()
}
func (_Commit__KeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{"ipldgit.Commit.KeyAssembler"}.AssignBool(false)
}
func (_Commit__KeyAssembler) AssignInt(int64) error {
	return mixins.StringAssembler{"ipldgit.Commit.KeyAssembler"}.AssignInt(0)
}
func (_Commit__KeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{"ipldgit.Commit.KeyAssembler"}.AssignFloat(0)
}
func (ka *_Commit__KeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	switch k {
	case "DataSize":
		if ka.s & fieldBit__Commit_DataSize != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__Commit_DataSize}
		}
		ka.s += fieldBit__Commit_DataSize
		ka.state = maState_expectValue
		ka.f = 0
	case "GitTree":
		if ka.s & fieldBit__Commit_GitTree != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__Commit_GitTree}
		}
		ka.s += fieldBit__Commit_GitTree
		ka.state = maState_expectValue
		ka.f = 1
	case "Parents":
		if ka.s & fieldBit__Commit_Parents != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__Commit_Parents}
		}
		ka.s += fieldBit__Commit_Parents
		ka.state = maState_expectValue
		ka.f = 2
	case "Message":
		if ka.s & fieldBit__Commit_Message != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__Commit_Message}
		}
		ka.s += fieldBit__Commit_Message
		ka.state = maState_expectValue
		ka.f = 3
	case "Author":
		if ka.s & fieldBit__Commit_Author != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__Commit_Author}
		}
		ka.s += fieldBit__Commit_Author
		ka.state = maState_expectValue
		ka.f = 4
	case "Committer":
		if ka.s & fieldBit__Commit_Committer != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__Commit_Committer}
		}
		ka.s += fieldBit__Commit_Committer
		ka.state = maState_expectValue
		ka.f = 5
	case "Encoding":
		if ka.s & fieldBit__Commit_Encoding != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__Commit_Encoding}
		}
		ka.s += fieldBit__Commit_Encoding
		ka.state = maState_expectValue
		ka.f = 6
	case "Sig":
		if ka.s & fieldBit__Commit_Sig != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__Commit_Sig}
		}
		ka.s += fieldBit__Commit_Sig
		ka.state = maState_expectValue
		ka.f = 7
	case "MergeTag":
		if ka.s & fieldBit__Commit_MergeTag != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__Commit_MergeTag}
		}
		ka.s += fieldBit__Commit_MergeTag
		ka.state = maState_expectValue
		ka.f = 8
	case "Other":
		if ka.s & fieldBit__Commit_Other != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__Commit_Other}
		}
		ka.s += fieldBit__Commit_Other
		ka.state = maState_expectValue
		ka.f = 9
	default:
		return ipld.ErrInvalidKey{TypeName:"ipldgit.Commit", Key:&_String{k}}
	}
	return nil
}
func (_Commit__KeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{"ipldgit.Commit.KeyAssembler"}.AssignBytes(nil)
}
func (_Commit__KeyAssembler) AssignLink(ipld.Link) error {
	return mixins.StringAssembler{"ipldgit.Commit.KeyAssembler"}.AssignLink(nil)
}
func (ka *_Commit__KeyAssembler) AssignNode(v ipld.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_Commit__KeyAssembler) Prototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (Commit) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n Commit) Representation() ipld.Node {
	return (*_Commit__Repr)(n)
}
type _Commit__Repr _Commit
var (
	fieldName__Commit_DataSize_serial = _String{"DataSize"}
	fieldName__Commit_GitTree_serial = _String{"GitTree"}
	fieldName__Commit_Parents_serial = _String{"Parents"}
	fieldName__Commit_Message_serial = _String{"Message"}
	fieldName__Commit_Author_serial = _String{"Author"}
	fieldName__Commit_Committer_serial = _String{"Committer"}
	fieldName__Commit_Encoding_serial = _String{"Encoding"}
	fieldName__Commit_Sig_serial = _String{"Sig"}
	fieldName__Commit_MergeTag_serial = _String{"MergeTag"}
	fieldName__Commit_Other_serial = _String{"Other"}
)
var _ ipld.Node = &_Commit__Repr{}
func (_Commit__Repr) Kind() ipld.Kind {
	return ipld.Kind_Map
}
func (n *_Commit__Repr) LookupByString(key string) (ipld.Node, error) {
	switch key {
	case "DataSize":
		return n.DataSize.Representation(), nil
	case "GitTree":
		return n.GitTree.Representation(), nil
	case "Parents":
		return n.Parents.Representation(), nil
	case "Message":
		return n.Message.Representation(), nil
	case "Author":
		if n.Author.m == schema.Maybe_Absent {
			return ipld.Absent, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
		return n.Author.v.Representation(), nil
	case "Committer":
		if n.Committer.m == schema.Maybe_Absent {
			return ipld.Absent, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
		return n.Committer.v.Representation(), nil
	case "Encoding":
		if n.Encoding.m == schema.Maybe_Absent {
			return ipld.Absent, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
		return n.Encoding.v.Representation(), nil
	case "Sig":
		if n.Sig.m == schema.Maybe_Absent {
			return ipld.Absent, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
		return n.Sig.v.Representation(), nil
	case "MergeTag":
		return n.MergeTag.Representation(), nil
	case "Other":
		return n.Other.Representation(), nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfString(key)}
	}
}
func (n *_Commit__Repr) LookupByNode(key ipld.Node) (ipld.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (_Commit__Repr) LookupByIndex(idx int64) (ipld.Node, error) {
	return mixins.Map{"ipldgit.Commit.Repr"}.LookupByIndex(0)
}
func (n _Commit__Repr) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return n.LookupByString(seg.String())
}
func (n *_Commit__Repr) MapIterator() ipld.MapIterator {
	return &_Commit__ReprMapItr{n, 0}
}

type _Commit__ReprMapItr struct {
	n   *_Commit__Repr
	idx int
	
}

func (itr *_Commit__ReprMapItr) Next() (k ipld.Node, v ipld.Node, _ error) {
advance:if itr.idx >= 10 {
		return nil, nil, ipld.ErrIteratorOverread{}
	}
	switch itr.idx {
	case 0:
		k = &fieldName__Commit_DataSize_serial
		v = itr.n.DataSize.Representation()
	case 1:
		k = &fieldName__Commit_GitTree_serial
		v = itr.n.GitTree.Representation()
	case 2:
		k = &fieldName__Commit_Parents_serial
		v = itr.n.Parents.Representation()
	case 3:
		k = &fieldName__Commit_Message_serial
		v = itr.n.Message.Representation()
	case 4:
		k = &fieldName__Commit_Author_serial
		if itr.n.Author.m == schema.Maybe_Absent {
			itr.idx++
			goto advance
		}
		v = itr.n.Author.v.Representation()
	case 5:
		k = &fieldName__Commit_Committer_serial
		if itr.n.Committer.m == schema.Maybe_Absent {
			itr.idx++
			goto advance
		}
		v = itr.n.Committer.v.Representation()
	case 6:
		k = &fieldName__Commit_Encoding_serial
		if itr.n.Encoding.m == schema.Maybe_Absent {
			itr.idx++
			goto advance
		}
		v = itr.n.Encoding.v.Representation()
	case 7:
		k = &fieldName__Commit_Sig_serial
		if itr.n.Sig.m == schema.Maybe_Absent {
			itr.idx++
			goto advance
		}
		v = itr.n.Sig.v.Representation()
	case 8:
		k = &fieldName__Commit_MergeTag_serial
		v = itr.n.MergeTag.Representation()
	case 9:
		k = &fieldName__Commit_Other_serial
		v = itr.n.Other.Representation()
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_Commit__ReprMapItr) Done() bool {
	return itr.idx >= 10
}
func (_Commit__Repr) ListIterator() ipld.ListIterator {
	return nil
}
func (rn *_Commit__Repr) Length() int64 {
	l := 10
	if rn.Author.m == schema.Maybe_Absent {
		l--
	}
	if rn.Committer.m == schema.Maybe_Absent {
		l--
	}
	if rn.Encoding.m == schema.Maybe_Absent {
		l--
	}
	if rn.Sig.m == schema.Maybe_Absent {
		l--
	}
	return int64(l)
}
func (_Commit__Repr) IsAbsent() bool {
	return false
}
func (_Commit__Repr) IsNull() bool {
	return false
}
func (_Commit__Repr) AsBool() (bool, error) {
	return mixins.Map{"ipldgit.Commit.Repr"}.AsBool()
}
func (_Commit__Repr) AsInt() (int64, error) {
	return mixins.Map{"ipldgit.Commit.Repr"}.AsInt()
}
func (_Commit__Repr) AsFloat() (float64, error) {
	return mixins.Map{"ipldgit.Commit.Repr"}.AsFloat()
}
func (_Commit__Repr) AsString() (string, error) {
	return mixins.Map{"ipldgit.Commit.Repr"}.AsString()
}
func (_Commit__Repr) AsBytes() ([]byte, error) {
	return mixins.Map{"ipldgit.Commit.Repr"}.AsBytes()
}
func (_Commit__Repr) AsLink() (ipld.Link, error) {
	return mixins.Map{"ipldgit.Commit.Repr"}.AsLink()
}
func (_Commit__Repr) Prototype() ipld.NodePrototype {
	return _Commit__ReprPrototype{}
}
type _Commit__ReprPrototype struct{}

func (_Commit__ReprPrototype) NewBuilder() ipld.NodeBuilder {
	var nb _Commit__ReprBuilder
	nb.Reset()
	return &nb
}
type _Commit__ReprBuilder struct {
	_Commit__ReprAssembler
}
func (nb *_Commit__ReprBuilder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Commit__ReprBuilder) Reset() {
	var w _Commit
	var m schema.Maybe
	*nb = _Commit__ReprBuilder{_Commit__ReprAssembler{w: &w, m: &m}}
}
type _Commit__ReprAssembler struct {
	w *_Commit
	m *schema.Maybe
	state maState
	s int
	f int

	cm schema.Maybe
	ca_DataSize _String__ReprAssembler
	ca_GitTree _LinkTree__ReprAssembler
	ca_Parents _ListParents__ReprAssembler
	ca_Message _String__ReprAssembler
	ca_Author _PersonInfo__ReprAssembler
	ca_Committer _PersonInfo__ReprAssembler
	ca_Encoding _String__ReprAssembler
	ca_Sig _GpgSig__ReprAssembler
	ca_MergeTag _ListTag__ReprAssembler
	ca_Other _ListString__ReprAssembler
	}

func (na *_Commit__ReprAssembler) reset() {
	na.state = maState_initial
	na.s = 0
	na.ca_DataSize.reset()
	na.ca_GitTree.reset()
	na.ca_Parents.reset()
	na.ca_Message.reset()
	na.ca_Author.reset()
	na.ca_Committer.reset()
	na.ca_Encoding.reset()
	na.ca_Sig.reset()
	na.ca_MergeTag.reset()
	na.ca_Other.reset()
}
func (na *_Commit__ReprAssembler) BeginMap(int64) (ipld.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_Commit{}
	}
	return na, nil
}
func (_Commit__ReprAssembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.MapAssembler{"ipldgit.Commit.Repr"}.BeginList(0)
}
func (na *_Commit__ReprAssembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{"ipldgit.Commit.Repr.Repr"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_Commit__ReprAssembler) AssignBool(bool) error {
	return mixins.MapAssembler{"ipldgit.Commit.Repr"}.AssignBool(false)
}
func (_Commit__ReprAssembler) AssignInt(int64) error {
	return mixins.MapAssembler{"ipldgit.Commit.Repr"}.AssignInt(0)
}
func (_Commit__ReprAssembler) AssignFloat(float64) error {
	return mixins.MapAssembler{"ipldgit.Commit.Repr"}.AssignFloat(0)
}
func (_Commit__ReprAssembler) AssignString(string) error {
	return mixins.MapAssembler{"ipldgit.Commit.Repr"}.AssignString("")
}
func (_Commit__ReprAssembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{"ipldgit.Commit.Repr"}.AssignBytes(nil)
}
func (_Commit__ReprAssembler) AssignLink(ipld.Link) error {
	return mixins.MapAssembler{"ipldgit.Commit.Repr"}.AssignLink(nil)
}
func (na *_Commit__ReprAssembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Commit); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != ipld.Kind_Map {
		return ipld.ErrWrongKind{TypeName: "ipldgit.Commit.Repr", MethodName: "AssignNode", AppropriateKind: ipld.KindSet_JustMap, ActualKind: v.Kind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_Commit__ReprAssembler) Prototype() ipld.NodePrototype {
	return _Commit__ReprPrototype{}
}
func (ma *_Commit__ReprAssembler) valueFinishTidy() bool {
	switch ma.f {
	case 0:
		switch ma.cm {
		case schema.Maybe_Value:ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 1:
		switch ma.cm {
		case schema.Maybe_Value:ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 2:
		switch ma.cm {
		case schema.Maybe_Value:ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 3:
		switch ma.cm {
		case schema.Maybe_Value:ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 4:
		switch ma.w.Author.m {
		case schema.Maybe_Value:
			ma.w.Author.v = ma.ca_Author.w
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 5:
		switch ma.w.Committer.m {
		case schema.Maybe_Value:
			ma.w.Committer.v = ma.ca_Committer.w
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 6:
		switch ma.w.Encoding.m {
		case schema.Maybe_Value:
			ma.w.Encoding.v = ma.ca_Encoding.w
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 7:
		switch ma.w.Sig.m {
		case schema.Maybe_Value:
			ma.w.Sig.v = ma.ca_Sig.w
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 8:
		switch ma.cm {
		case schema.Maybe_Value:ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 9:
		switch ma.cm {
		case schema.Maybe_Value:ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	default:
		panic("unreachable")
	}
}
func (ma *_Commit__ReprAssembler) AssembleEntry(k string) (ipld.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	switch k {
	case "DataSize":
		if ma.s & fieldBit__Commit_DataSize != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__Commit_DataSize_serial}
		}
		ma.s += fieldBit__Commit_DataSize
		ma.state = maState_midValue
		ma.f = 0
		ma.ca_DataSize.w = &ma.w.DataSize
		ma.ca_DataSize.m = &ma.cm
		return &ma.ca_DataSize, nil
	case "GitTree":
		if ma.s & fieldBit__Commit_GitTree != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__Commit_GitTree_serial}
		}
		ma.s += fieldBit__Commit_GitTree
		ma.state = maState_midValue
		ma.f = 1
		ma.ca_GitTree.w = &ma.w.GitTree
		ma.ca_GitTree.m = &ma.cm
		return &ma.ca_GitTree, nil
	case "Parents":
		if ma.s & fieldBit__Commit_Parents != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__Commit_Parents_serial}
		}
		ma.s += fieldBit__Commit_Parents
		ma.state = maState_midValue
		ma.f = 2
		ma.ca_Parents.w = &ma.w.Parents
		ma.ca_Parents.m = &ma.cm
		return &ma.ca_Parents, nil
	case "Message":
		if ma.s & fieldBit__Commit_Message != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__Commit_Message_serial}
		}
		ma.s += fieldBit__Commit_Message
		ma.state = maState_midValue
		ma.f = 3
		ma.ca_Message.w = &ma.w.Message
		ma.ca_Message.m = &ma.cm
		return &ma.ca_Message, nil
	case "Author":
		if ma.s & fieldBit__Commit_Author != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__Commit_Author_serial}
		}
		ma.s += fieldBit__Commit_Author
		ma.state = maState_midValue
		ma.f = 4
		ma.ca_Author.w = ma.w.Author.v
		ma.ca_Author.m = &ma.w.Author.m
		
		return &ma.ca_Author, nil
	case "Committer":
		if ma.s & fieldBit__Commit_Committer != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__Commit_Committer_serial}
		}
		ma.s += fieldBit__Commit_Committer
		ma.state = maState_midValue
		ma.f = 5
		ma.ca_Committer.w = ma.w.Committer.v
		ma.ca_Committer.m = &ma.w.Committer.m
		
		return &ma.ca_Committer, nil
	case "Encoding":
		if ma.s & fieldBit__Commit_Encoding != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__Commit_Encoding_serial}
		}
		ma.s += fieldBit__Commit_Encoding
		ma.state = maState_midValue
		ma.f = 6
		ma.ca_Encoding.w = ma.w.Encoding.v
		ma.ca_Encoding.m = &ma.w.Encoding.m
		
		return &ma.ca_Encoding, nil
	case "Sig":
		if ma.s & fieldBit__Commit_Sig != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__Commit_Sig_serial}
		}
		ma.s += fieldBit__Commit_Sig
		ma.state = maState_midValue
		ma.f = 7
		ma.ca_Sig.w = ma.w.Sig.v
		ma.ca_Sig.m = &ma.w.Sig.m
		
		return &ma.ca_Sig, nil
	case "MergeTag":
		if ma.s & fieldBit__Commit_MergeTag != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__Commit_MergeTag_serial}
		}
		ma.s += fieldBit__Commit_MergeTag
		ma.state = maState_midValue
		ma.f = 8
		ma.ca_MergeTag.w = &ma.w.MergeTag
		ma.ca_MergeTag.m = &ma.cm
		return &ma.ca_MergeTag, nil
	case "Other":
		if ma.s & fieldBit__Commit_Other != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__Commit_Other_serial}
		}
		ma.s += fieldBit__Commit_Other
		ma.state = maState_midValue
		ma.f = 9
		ma.ca_Other.w = &ma.w.Other
		ma.ca_Other.m = &ma.cm
		return &ma.ca_Other, nil
	default:
		return nil, ipld.ErrInvalidKey{TypeName:"ipldgit.Commit.Repr", Key:&_String{k}}
	}
}
func (ma *_Commit__ReprAssembler) AssembleKey() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_Commit__ReprKeyAssembler)(ma)
}
func (ma *_Commit__ReprAssembler) AssembleValue() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.f {
	case 0:
		ma.ca_DataSize.w = &ma.w.DataSize
		ma.ca_DataSize.m = &ma.cm
		return &ma.ca_DataSize
	case 1:
		ma.ca_GitTree.w = &ma.w.GitTree
		ma.ca_GitTree.m = &ma.cm
		return &ma.ca_GitTree
	case 2:
		ma.ca_Parents.w = &ma.w.Parents
		ma.ca_Parents.m = &ma.cm
		return &ma.ca_Parents
	case 3:
		ma.ca_Message.w = &ma.w.Message
		ma.ca_Message.m = &ma.cm
		return &ma.ca_Message
	case 4:
		ma.ca_Author.w = ma.w.Author.v
		ma.ca_Author.m = &ma.w.Author.m
		
		return &ma.ca_Author
	case 5:
		ma.ca_Committer.w = ma.w.Committer.v
		ma.ca_Committer.m = &ma.w.Committer.m
		
		return &ma.ca_Committer
	case 6:
		ma.ca_Encoding.w = ma.w.Encoding.v
		ma.ca_Encoding.m = &ma.w.Encoding.m
		
		return &ma.ca_Encoding
	case 7:
		ma.ca_Sig.w = ma.w.Sig.v
		ma.ca_Sig.m = &ma.w.Sig.m
		
		return &ma.ca_Sig
	case 8:
		ma.ca_MergeTag.w = &ma.w.MergeTag
		ma.ca_MergeTag.m = &ma.cm
		return &ma.ca_MergeTag
	case 9:
		ma.ca_Other.w = &ma.w.Other
		ma.ca_Other.m = &ma.cm
		return &ma.ca_Other
	default:
		panic("unreachable")
	}
}
func (ma *_Commit__ReprAssembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	if ma.s & fieldBits__Commit_sufficient != fieldBits__Commit_sufficient {
		err := ipld.ErrMissingRequiredField{Missing: make([]string, 0)}
		if ma.s & fieldBit__Commit_DataSize == 0 {
			err.Missing = append(err.Missing, "DataSize")
		}
		if ma.s & fieldBit__Commit_GitTree == 0 {
			err.Missing = append(err.Missing, "GitTree")
		}
		if ma.s & fieldBit__Commit_Parents == 0 {
			err.Missing = append(err.Missing, "Parents")
		}
		if ma.s & fieldBit__Commit_Message == 0 {
			err.Missing = append(err.Missing, "Message")
		}
		if ma.s & fieldBit__Commit_MergeTag == 0 {
			err.Missing = append(err.Missing, "MergeTag")
		}
		if ma.s & fieldBit__Commit_Other == 0 {
			err.Missing = append(err.Missing, "Other")
		}
		return err
	}
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_Commit__ReprAssembler) KeyPrototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (ma *_Commit__ReprAssembler) ValuePrototype(k string) ipld.NodePrototype {
	panic("todo structbuilder mapassembler repr valueprototype")
}
type _Commit__ReprKeyAssembler _Commit__ReprAssembler
func (_Commit__ReprKeyAssembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	return mixins.StringAssembler{"ipldgit.Commit.Repr.KeyAssembler"}.BeginMap(0)
}
func (_Commit__ReprKeyAssembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.StringAssembler{"ipldgit.Commit.Repr.KeyAssembler"}.BeginList(0)
}
func (na *_Commit__ReprKeyAssembler) AssignNull() error {
	return mixins.StringAssembler{"ipldgit.Commit.Repr.KeyAssembler"}.AssignNull()
}
func (_Commit__ReprKeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{"ipldgit.Commit.Repr.KeyAssembler"}.AssignBool(false)
}
func (_Commit__ReprKeyAssembler) AssignInt(int64) error {
	return mixins.StringAssembler{"ipldgit.Commit.Repr.KeyAssembler"}.AssignInt(0)
}
func (_Commit__ReprKeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{"ipldgit.Commit.Repr.KeyAssembler"}.AssignFloat(0)
}
func (ka *_Commit__ReprKeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	switch k {
	case "DataSize":
		if ka.s & fieldBit__Commit_DataSize != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__Commit_DataSize_serial}
		}
		ka.s += fieldBit__Commit_DataSize
		ka.state = maState_expectValue
		ka.f = 0
	case "GitTree":
		if ka.s & fieldBit__Commit_GitTree != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__Commit_GitTree_serial}
		}
		ka.s += fieldBit__Commit_GitTree
		ka.state = maState_expectValue
		ka.f = 1
	case "Parents":
		if ka.s & fieldBit__Commit_Parents != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__Commit_Parents_serial}
		}
		ka.s += fieldBit__Commit_Parents
		ka.state = maState_expectValue
		ka.f = 2
	case "Message":
		if ka.s & fieldBit__Commit_Message != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__Commit_Message_serial}
		}
		ka.s += fieldBit__Commit_Message
		ka.state = maState_expectValue
		ka.f = 3
	case "Author":
		if ka.s & fieldBit__Commit_Author != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__Commit_Author_serial}
		}
		ka.s += fieldBit__Commit_Author
		ka.state = maState_expectValue
		ka.f = 4
	case "Committer":
		if ka.s & fieldBit__Commit_Committer != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__Commit_Committer_serial}
		}
		ka.s += fieldBit__Commit_Committer
		ka.state = maState_expectValue
		ka.f = 5
	case "Encoding":
		if ka.s & fieldBit__Commit_Encoding != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__Commit_Encoding_serial}
		}
		ka.s += fieldBit__Commit_Encoding
		ka.state = maState_expectValue
		ka.f = 6
	case "Sig":
		if ka.s & fieldBit__Commit_Sig != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__Commit_Sig_serial}
		}
		ka.s += fieldBit__Commit_Sig
		ka.state = maState_expectValue
		ka.f = 7
	case "MergeTag":
		if ka.s & fieldBit__Commit_MergeTag != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__Commit_MergeTag_serial}
		}
		ka.s += fieldBit__Commit_MergeTag
		ka.state = maState_expectValue
		ka.f = 8
	case "Other":
		if ka.s & fieldBit__Commit_Other != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__Commit_Other_serial}
		}
		ka.s += fieldBit__Commit_Other
		ka.state = maState_expectValue
		ka.f = 9
	default:
		return ipld.ErrInvalidKey{TypeName:"ipldgit.Commit.Repr", Key:&_String{k}}
	}
	return nil
}
func (_Commit__ReprKeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{"ipldgit.Commit.Repr.KeyAssembler"}.AssignBytes(nil)
}
func (_Commit__ReprKeyAssembler) AssignLink(ipld.Link) error {
	return mixins.StringAssembler{"ipldgit.Commit.Repr.KeyAssembler"}.AssignLink(nil)
}
func (ka *_Commit__ReprKeyAssembler) AssignNode(v ipld.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_Commit__ReprKeyAssembler) Prototype() ipld.NodePrototype {
	return _String__Prototype{}
}

func (n GpgSig) String() string {
	return n.x
}
func (_GpgSig__Prototype) fromString(w *_GpgSig, v string) error {
	*w = _GpgSig{v}
	return nil
}
func (_GpgSig__Prototype) FromString(v string) (GpgSig, error) {
	n := _GpgSig{v}
	return &n, nil
}
type _GpgSig__Maybe struct {
	m schema.Maybe
	v GpgSig
}
type MaybeGpgSig = *_GpgSig__Maybe

func (m MaybeGpgSig) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeGpgSig) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeGpgSig) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeGpgSig) AsNode() ipld.Node {
	switch m.m {
		case schema.Maybe_Absent:
			return ipld.Absent
		case schema.Maybe_Null:
			return ipld.Null
		case schema.Maybe_Value:
			return m.v
		default:
			panic("unreachable")
	}
}
func (m MaybeGpgSig) Must() GpgSig {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}
var _ ipld.Node = (GpgSig)(&_GpgSig{})
var _ schema.TypedNode = (GpgSig)(&_GpgSig{})
func (GpgSig) Kind() ipld.Kind {
	return ipld.Kind_String
}
func (GpgSig) LookupByString(string) (ipld.Node, error) {
	return mixins.String{"ipldgit.GpgSig"}.LookupByString("")
}
func (GpgSig) LookupByNode(ipld.Node) (ipld.Node, error) {
	return mixins.String{"ipldgit.GpgSig"}.LookupByNode(nil)
}
func (GpgSig) LookupByIndex(idx int64) (ipld.Node, error) {
	return mixins.String{"ipldgit.GpgSig"}.LookupByIndex(0)
}
func (GpgSig) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return mixins.String{"ipldgit.GpgSig"}.LookupBySegment(seg)
}
func (GpgSig) MapIterator() ipld.MapIterator {
	return nil
}
func (GpgSig) ListIterator() ipld.ListIterator {
	return nil
}
func (GpgSig) Length() int64 {
	return -1
}
func (GpgSig) IsAbsent() bool {
	return false
}
func (GpgSig) IsNull() bool {
	return false
}
func (GpgSig) AsBool() (bool, error) {
	return mixins.String{"ipldgit.GpgSig"}.AsBool()
}
func (GpgSig) AsInt() (int64, error) {
	return mixins.String{"ipldgit.GpgSig"}.AsInt()
}
func (GpgSig) AsFloat() (float64, error) {
	return mixins.String{"ipldgit.GpgSig"}.AsFloat()
}
func (n GpgSig) AsString() (string, error) {
	return n.x, nil
}
func (GpgSig) AsBytes() ([]byte, error) {
	return mixins.String{"ipldgit.GpgSig"}.AsBytes()
}
func (GpgSig) AsLink() (ipld.Link, error) {
	return mixins.String{"ipldgit.GpgSig"}.AsLink()
}
func (GpgSig) Prototype() ipld.NodePrototype {
	return _GpgSig__Prototype{}
}
type _GpgSig__Prototype struct{}

func (_GpgSig__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _GpgSig__Builder
	nb.Reset()
	return &nb
}
type _GpgSig__Builder struct {
	_GpgSig__Assembler
}
func (nb *_GpgSig__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_GpgSig__Builder) Reset() {
	var w _GpgSig
	var m schema.Maybe
	*nb = _GpgSig__Builder{_GpgSig__Assembler{w: &w, m: &m}}
}
type _GpgSig__Assembler struct {
	w *_GpgSig
	m *schema.Maybe
}

func (na *_GpgSig__Assembler) reset() {}
func (_GpgSig__Assembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	return mixins.StringAssembler{"ipldgit.GpgSig"}.BeginMap(0)
}
func (_GpgSig__Assembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.StringAssembler{"ipldgit.GpgSig"}.BeginList(0)
}
func (na *_GpgSig__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.StringAssembler{"ipldgit.GpgSig"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	panic("unreachable")
}
func (_GpgSig__Assembler) AssignBool(bool) error {
	return mixins.StringAssembler{"ipldgit.GpgSig"}.AssignBool(false)
}
func (_GpgSig__Assembler) AssignInt(int64) error {
	return mixins.StringAssembler{"ipldgit.GpgSig"}.AssignInt(0)
}
func (_GpgSig__Assembler) AssignFloat(float64) error {
	return mixins.StringAssembler{"ipldgit.GpgSig"}.AssignFloat(0)
}
func (na *_GpgSig__Assembler) AssignString(v string) error {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	if na.w == nil {
		na.w = &_GpgSig{}
	}
	na.w.x = v
	*na.m = schema.Maybe_Value
	return nil
}
func (_GpgSig__Assembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{"ipldgit.GpgSig"}.AssignBytes(nil)
}
func (_GpgSig__Assembler) AssignLink(ipld.Link) error {
	return mixins.StringAssembler{"ipldgit.GpgSig"}.AssignLink(nil)
}
func (na *_GpgSig__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_GpgSig); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return na.AssignString(v2)
	}
}
func (_GpgSig__Assembler) Prototype() ipld.NodePrototype {
	return _GpgSig__Prototype{}
}
func (GpgSig) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n GpgSig) Representation() ipld.Node {
	return (*_GpgSig__Repr)(n)
}
type _GpgSig__Repr = _GpgSig
var _ ipld.Node = &_GpgSig__Repr{}
type _GpgSig__ReprPrototype = _GpgSig__Prototype
type _GpgSig__ReprAssembler = _GpgSig__Assembler

func (n Link) Link() ipld.Link {
	return n.x
}
func (_Link__Prototype) FromLink(v ipld.Link) (Link, error) {
	n := _Link{v}
	return &n, nil
}
type _Link__Maybe struct {
	m schema.Maybe
	v Link
}
type MaybeLink = *_Link__Maybe

func (m MaybeLink) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeLink) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeLink) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeLink) AsNode() ipld.Node {
	switch m.m {
		case schema.Maybe_Absent:
			return ipld.Absent
		case schema.Maybe_Null:
			return ipld.Null
		case schema.Maybe_Value:
			return m.v
		default:
			panic("unreachable")
	}
}
func (m MaybeLink) Must() Link {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}
var _ ipld.Node = (Link)(&_Link{})
var _ schema.TypedNode = (Link)(&_Link{})
func (Link) Kind() ipld.Kind {
	return ipld.Kind_Link
}
func (Link) LookupByString(string) (ipld.Node, error) {
	return mixins.Link{"ipldgit.Link"}.LookupByString("")
}
func (Link) LookupByNode(ipld.Node) (ipld.Node, error) {
	return mixins.Link{"ipldgit.Link"}.LookupByNode(nil)
}
func (Link) LookupByIndex(idx int64) (ipld.Node, error) {
	return mixins.Link{"ipldgit.Link"}.LookupByIndex(0)
}
func (Link) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return mixins.Link{"ipldgit.Link"}.LookupBySegment(seg)
}
func (Link) MapIterator() ipld.MapIterator {
	return nil
}
func (Link) ListIterator() ipld.ListIterator {
	return nil
}
func (Link) Length() int64 {
	return -1
}
func (Link) IsAbsent() bool {
	return false
}
func (Link) IsNull() bool {
	return false
}
func (Link) AsBool() (bool, error) {
	return mixins.Link{"ipldgit.Link"}.AsBool()
}
func (Link) AsInt() (int64, error) {
	return mixins.Link{"ipldgit.Link"}.AsInt()
}
func (Link) AsFloat() (float64, error) {
	return mixins.Link{"ipldgit.Link"}.AsFloat()
}
func (Link) AsString() (string, error) {
	return mixins.Link{"ipldgit.Link"}.AsString()
}
func (Link) AsBytes() ([]byte, error) {
	return mixins.Link{"ipldgit.Link"}.AsBytes()
}
func (n Link) AsLink() (ipld.Link, error) {
	return n.x, nil
}
func (Link) Prototype() ipld.NodePrototype {
	return _Link__Prototype{}
}
type _Link__Prototype struct{}

func (_Link__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _Link__Builder
	nb.Reset()
	return &nb
}
type _Link__Builder struct {
	_Link__Assembler
}
func (nb *_Link__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Link__Builder) Reset() {
	var w _Link
	var m schema.Maybe
	*nb = _Link__Builder{_Link__Assembler{w: &w, m: &m}}
}
type _Link__Assembler struct {
	w *_Link
	m *schema.Maybe
}

func (na *_Link__Assembler) reset() {}
func (_Link__Assembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	return mixins.LinkAssembler{"ipldgit.Link"}.BeginMap(0)
}
func (_Link__Assembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.LinkAssembler{"ipldgit.Link"}.BeginList(0)
}
func (na *_Link__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.LinkAssembler{"ipldgit.Link"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	panic("unreachable")
}
func (_Link__Assembler) AssignBool(bool) error {
	return mixins.LinkAssembler{"ipldgit.Link"}.AssignBool(false)
}
func (_Link__Assembler) AssignInt(int64) error {
	return mixins.LinkAssembler{"ipldgit.Link"}.AssignInt(0)
}
func (_Link__Assembler) AssignFloat(float64) error {
	return mixins.LinkAssembler{"ipldgit.Link"}.AssignFloat(0)
}
func (_Link__Assembler) AssignString(string) error {
	return mixins.LinkAssembler{"ipldgit.Link"}.AssignString("")
}
func (_Link__Assembler) AssignBytes([]byte) error {
	return mixins.LinkAssembler{"ipldgit.Link"}.AssignBytes(nil)
}
func (na *_Link__Assembler) AssignLink(v ipld.Link) error {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	if na.w == nil {
		na.w = &_Link{}
	}
	na.w.x = v
	*na.m = schema.Maybe_Value
	return nil
}
func (na *_Link__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Link); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v2, err := v.AsLink(); err != nil {
		return err
	} else {
		return na.AssignLink(v2)
	}
}
func (_Link__Assembler) Prototype() ipld.NodePrototype {
	return _Link__Prototype{}
}
func (Link) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n Link) Representation() ipld.Node {
	return (*_Link__Repr)(n)
}
type _Link__Repr = _Link
var _ ipld.Node = &_Link__Repr{}
type _Link__ReprPrototype = _Link__Prototype
type _Link__ReprAssembler = _Link__Assembler

func (n LinkTree) Link() ipld.Link {
	return n.x
}
func (_LinkTree__Prototype) FromLink(v ipld.Link) (LinkTree, error) {
	n := _LinkTree{v}
	return &n, nil
}
type _LinkTree__Maybe struct {
	m schema.Maybe
	v LinkTree
}
type MaybeLinkTree = *_LinkTree__Maybe

func (m MaybeLinkTree) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeLinkTree) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeLinkTree) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeLinkTree) AsNode() ipld.Node {
	switch m.m {
		case schema.Maybe_Absent:
			return ipld.Absent
		case schema.Maybe_Null:
			return ipld.Null
		case schema.Maybe_Value:
			return m.v
		default:
			panic("unreachable")
	}
}
func (m MaybeLinkTree) Must() LinkTree {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}
var _ ipld.Node = (LinkTree)(&_LinkTree{})
var _ schema.TypedNode = (LinkTree)(&_LinkTree{})
func (LinkTree) Kind() ipld.Kind {
	return ipld.Kind_Link
}
func (LinkTree) LookupByString(string) (ipld.Node, error) {
	return mixins.Link{"ipldgit.LinkTree"}.LookupByString("")
}
func (LinkTree) LookupByNode(ipld.Node) (ipld.Node, error) {
	return mixins.Link{"ipldgit.LinkTree"}.LookupByNode(nil)
}
func (LinkTree) LookupByIndex(idx int64) (ipld.Node, error) {
	return mixins.Link{"ipldgit.LinkTree"}.LookupByIndex(0)
}
func (LinkTree) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return mixins.Link{"ipldgit.LinkTree"}.LookupBySegment(seg)
}
func (LinkTree) MapIterator() ipld.MapIterator {
	return nil
}
func (LinkTree) ListIterator() ipld.ListIterator {
	return nil
}
func (LinkTree) Length() int64 {
	return -1
}
func (LinkTree) IsAbsent() bool {
	return false
}
func (LinkTree) IsNull() bool {
	return false
}
func (LinkTree) AsBool() (bool, error) {
	return mixins.Link{"ipldgit.LinkTree"}.AsBool()
}
func (LinkTree) AsInt() (int64, error) {
	return mixins.Link{"ipldgit.LinkTree"}.AsInt()
}
func (LinkTree) AsFloat() (float64, error) {
	return mixins.Link{"ipldgit.LinkTree"}.AsFloat()
}
func (LinkTree) AsString() (string, error) {
	return mixins.Link{"ipldgit.LinkTree"}.AsString()
}
func (LinkTree) AsBytes() ([]byte, error) {
	return mixins.Link{"ipldgit.LinkTree"}.AsBytes()
}
func (n LinkTree) AsLink() (ipld.Link, error) {
	return n.x, nil
}
func (LinkTree) Prototype() ipld.NodePrototype {
	return _LinkTree__Prototype{}
}
type _LinkTree__Prototype struct{}

func (_LinkTree__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _LinkTree__Builder
	nb.Reset()
	return &nb
}
type _LinkTree__Builder struct {
	_LinkTree__Assembler
}
func (nb *_LinkTree__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_LinkTree__Builder) Reset() {
	var w _LinkTree
	var m schema.Maybe
	*nb = _LinkTree__Builder{_LinkTree__Assembler{w: &w, m: &m}}
}
type _LinkTree__Assembler struct {
	w *_LinkTree
	m *schema.Maybe
}

func (na *_LinkTree__Assembler) reset() {}
func (_LinkTree__Assembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	return mixins.LinkAssembler{"ipldgit.LinkTree"}.BeginMap(0)
}
func (_LinkTree__Assembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.LinkAssembler{"ipldgit.LinkTree"}.BeginList(0)
}
func (na *_LinkTree__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.LinkAssembler{"ipldgit.LinkTree"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	panic("unreachable")
}
func (_LinkTree__Assembler) AssignBool(bool) error {
	return mixins.LinkAssembler{"ipldgit.LinkTree"}.AssignBool(false)
}
func (_LinkTree__Assembler) AssignInt(int64) error {
	return mixins.LinkAssembler{"ipldgit.LinkTree"}.AssignInt(0)
}
func (_LinkTree__Assembler) AssignFloat(float64) error {
	return mixins.LinkAssembler{"ipldgit.LinkTree"}.AssignFloat(0)
}
func (_LinkTree__Assembler) AssignString(string) error {
	return mixins.LinkAssembler{"ipldgit.LinkTree"}.AssignString("")
}
func (_LinkTree__Assembler) AssignBytes([]byte) error {
	return mixins.LinkAssembler{"ipldgit.LinkTree"}.AssignBytes(nil)
}
func (na *_LinkTree__Assembler) AssignLink(v ipld.Link) error {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	if na.w == nil {
		na.w = &_LinkTree{}
	}
	na.w.x = v
	*na.m = schema.Maybe_Value
	return nil
}
func (na *_LinkTree__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_LinkTree); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v2, err := v.AsLink(); err != nil {
		return err
	} else {
		return na.AssignLink(v2)
	}
}
func (_LinkTree__Assembler) Prototype() ipld.NodePrototype {
	return _LinkTree__Prototype{}
}
func (LinkTree) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (LinkTree) LinkTargetNodePrototype() ipld.NodePrototype {
	return Type.LinkTree__Repr
}
func (n LinkTree) Representation() ipld.Node {
	return (*_LinkTree__Repr)(n)
}
type _LinkTree__Repr = _LinkTree
var _ ipld.Node = &_LinkTree__Repr{}
type _LinkTree__ReprPrototype = _LinkTree__Prototype
type _LinkTree__ReprAssembler = _LinkTree__Assembler

func (n *_ListParents) Lookup(idx int64) Link {
	if n.Length() <= idx {
		return nil
	}
	v := &n.x[idx]
	return v
}
func (n *_ListParents) LookupMaybe(idx int64) MaybeLink {
	if n.Length() <= idx {
		return nil
	}
	v := &n.x[idx]
	return &_Link__Maybe{
		m: schema.Maybe_Value,
		v: v,
	}
}

var _ListParents__valueAbsent = _Link__Maybe{m:schema.Maybe_Absent}
func (n ListParents) Iterator() *ListParents__Itr {
	return &ListParents__Itr{n, 0}
}

type ListParents__Itr struct {
	n ListParents
	idx  int
}

func (itr *ListParents__Itr) Next() (idx int64, v Link) {
	if itr.idx >= len(itr.n.x) {
		return -1, nil
	}
	idx = int64(itr.idx)
	v = &itr.n.x[itr.idx]
	itr.idx++
	return
}
func (itr *ListParents__Itr) Done() bool {
	return itr.idx >= len(itr.n.x)
}

type _ListParents__Maybe struct {
	m schema.Maybe
	v ListParents
}
type MaybeListParents = *_ListParents__Maybe

func (m MaybeListParents) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeListParents) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeListParents) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeListParents) AsNode() ipld.Node {
	switch m.m {
		case schema.Maybe_Absent:
			return ipld.Absent
		case schema.Maybe_Null:
			return ipld.Null
		case schema.Maybe_Value:
			return m.v
		default:
			panic("unreachable")
	}
}
func (m MaybeListParents) Must() ListParents {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}
var _ ipld.Node = (ListParents)(&_ListParents{})
var _ schema.TypedNode = (ListParents)(&_ListParents{})
func (ListParents) Kind() ipld.Kind {
	return ipld.Kind_List
}
func (ListParents) LookupByString(string) (ipld.Node, error) {
	return mixins.List{"ipldgit.ListParents"}.LookupByString("")
}
func (n ListParents) LookupByNode(k ipld.Node) (ipld.Node, error) {
	idx, err := k.AsInt()
	if err != nil {
		return nil, err
	}
	return n.LookupByIndex(idx)
}
func (n ListParents) LookupByIndex(idx int64) (ipld.Node, error) {
	if n.Length() <= idx {
		return nil, ipld.ErrNotExists{ipld.PathSegmentOfInt(idx)}
	}
	v := &n.x[idx]
	return v, nil
}
func (n ListParents) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	i, err := seg.Index()
	if err != nil {
		return nil, ipld.ErrInvalidSegmentForList{TypeName: "ipldgit.ListParents", TroubleSegment: seg, Reason: err}
	}
	return n.LookupByIndex(i)
}
func (ListParents) MapIterator() ipld.MapIterator {
	return nil
}
func (n ListParents) ListIterator() ipld.ListIterator {
	return &_ListParents__ListItr{n, 0}
}

type _ListParents__ListItr struct {
	n ListParents
	idx  int
}

func (itr *_ListParents__ListItr) Next() (idx int64, v ipld.Node, _ error) {
	if itr.idx >= len(itr.n.x) {
		return -1, nil, ipld.ErrIteratorOverread{}
	}
	idx = int64(itr.idx)
	x := &itr.n.x[itr.idx]
	v = x
	itr.idx++
	return
}
func (itr *_ListParents__ListItr) Done() bool {
	return itr.idx >= len(itr.n.x)
}

func (n ListParents) Length() int64 {
	return int64(len(n.x))
}
func (ListParents) IsAbsent() bool {
	return false
}
func (ListParents) IsNull() bool {
	return false
}
func (ListParents) AsBool() (bool, error) {
	return mixins.List{"ipldgit.ListParents"}.AsBool()
}
func (ListParents) AsInt() (int64, error) {
	return mixins.List{"ipldgit.ListParents"}.AsInt()
}
func (ListParents) AsFloat() (float64, error) {
	return mixins.List{"ipldgit.ListParents"}.AsFloat()
}
func (ListParents) AsString() (string, error) {
	return mixins.List{"ipldgit.ListParents"}.AsString()
}
func (ListParents) AsBytes() ([]byte, error) {
	return mixins.List{"ipldgit.ListParents"}.AsBytes()
}
func (ListParents) AsLink() (ipld.Link, error) {
	return mixins.List{"ipldgit.ListParents"}.AsLink()
}
func (ListParents) Prototype() ipld.NodePrototype {
	return _ListParents__Prototype{}
}
type _ListParents__Prototype struct{}

func (_ListParents__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _ListParents__Builder
	nb.Reset()
	return &nb
}
type _ListParents__Builder struct {
	_ListParents__Assembler
}
func (nb *_ListParents__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_ListParents__Builder) Reset() {
	var w _ListParents
	var m schema.Maybe
	*nb = _ListParents__Builder{_ListParents__Assembler{w: &w, m: &m}}
}
type _ListParents__Assembler struct {
	w *_ListParents
	m *schema.Maybe
	state laState

	cm schema.Maybe
	va _Link__Assembler
}

func (na *_ListParents__Assembler) reset() {
	na.state = laState_initial
	na.va.reset()
}
func (_ListParents__Assembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	return mixins.ListAssembler{"ipldgit.ListParents"}.BeginMap(0)
}
func (na *_ListParents__Assembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if sizeHint < 0 {
		sizeHint = 0
	}
	if na.w == nil {
		na.w = &_ListParents{}
	}
	if sizeHint > 0 {
		na.w.x = make([]_Link, 0, sizeHint)
	}
	return na, nil
}
func (na *_ListParents__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.ListAssembler{"ipldgit.ListParents"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_ListParents__Assembler) AssignBool(bool) error {
	return mixins.ListAssembler{"ipldgit.ListParents"}.AssignBool(false)
}
func (_ListParents__Assembler) AssignInt(int64) error {
	return mixins.ListAssembler{"ipldgit.ListParents"}.AssignInt(0)
}
func (_ListParents__Assembler) AssignFloat(float64) error {
	return mixins.ListAssembler{"ipldgit.ListParents"}.AssignFloat(0)
}
func (_ListParents__Assembler) AssignString(string) error {
	return mixins.ListAssembler{"ipldgit.ListParents"}.AssignString("")
}
func (_ListParents__Assembler) AssignBytes([]byte) error {
	return mixins.ListAssembler{"ipldgit.ListParents"}.AssignBytes(nil)
}
func (_ListParents__Assembler) AssignLink(ipld.Link) error {
	return mixins.ListAssembler{"ipldgit.ListParents"}.AssignLink(nil)
}
func (na *_ListParents__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_ListParents); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != ipld.Kind_List {
		return ipld.ErrWrongKind{TypeName: "ipldgit.ListParents", MethodName: "AssignNode", AppropriateKind: ipld.KindSet_JustList, ActualKind: v.Kind()}
	}
	itr := v.ListIterator()
	for !itr.Done() {
		_, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_ListParents__Assembler) Prototype() ipld.NodePrototype {
	return _ListParents__Prototype{}
}
func (la *_ListParents__Assembler) valueFinishTidy() bool {
	switch la.cm {
	case schema.Maybe_Value:
		la.va.w = nil
		la.cm = schema.Maybe_Absent
		la.state = laState_initial
		la.va.reset()
		return true
	default:
		return false
	}
}
func (la *_ListParents__Assembler) AssembleValue() ipld.NodeAssembler {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: AssembleValue cannot be called when still in the middle of assembling the previous value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	la.w.x = append(la.w.x, _Link{})
	la.state = laState_midValue
	row := &la.w.x[len(la.w.x)-1]
	la.va.w = row
	la.va.m = &la.cm
	return &la.va
}
func (la *_ListParents__Assembler) Finish() error {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	la.state = laState_finished
	*la.m = schema.Maybe_Value
	return nil
}
func (la *_ListParents__Assembler) ValuePrototype(_ int64) ipld.NodePrototype {
	return _Link__Prototype{}
}
func (ListParents) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n ListParents) Representation() ipld.Node {
	return (*_ListParents__Repr)(n)
}
type _ListParents__Repr _ListParents
var _ ipld.Node = &_ListParents__Repr{}
func (_ListParents__Repr) Kind() ipld.Kind {
	return ipld.Kind_List
}
func (_ListParents__Repr) LookupByString(string) (ipld.Node, error) {
	return mixins.List{"ipldgit.ListParents.Repr"}.LookupByString("")
}
func (nr *_ListParents__Repr) LookupByNode(k ipld.Node) (ipld.Node, error) {
	v, err := (ListParents)(nr).LookupByNode(k)
	if err != nil || v == ipld.Null {
		return v, err
	}
	return v.(Link).Representation(), nil
}
func (nr *_ListParents__Repr) LookupByIndex(idx int64) (ipld.Node, error) {
	v, err := (ListParents)(nr).LookupByIndex(idx)
	if err != nil || v == ipld.Null {
		return v, err
	}
	return v.(Link).Representation(), nil
}
func (n _ListParents__Repr) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	i, err := seg.Index()
	if err != nil {
		return nil, ipld.ErrInvalidSegmentForList{TypeName: "ipldgit.ListParents.Repr", TroubleSegment: seg, Reason: err}
	}
	return n.LookupByIndex(i)
}
func (_ListParents__Repr) MapIterator() ipld.MapIterator {
	return nil
}
func (nr *_ListParents__Repr) ListIterator() ipld.ListIterator {
	return &_ListParents__ReprListItr{(ListParents)(nr), 0}
}

type _ListParents__ReprListItr _ListParents__ListItr

func (itr *_ListParents__ReprListItr) Next() (idx int64, v ipld.Node, err error) {
	idx, v, err = (*_ListParents__ListItr)(itr).Next()
	if err != nil || v == ipld.Null {
		return
	}
	return idx, v.(Link).Representation(), nil
}
func (itr *_ListParents__ReprListItr) Done() bool {
	return (*_ListParents__ListItr)(itr).Done()
}

func (rn *_ListParents__Repr) Length() int64 {
	return int64(len(rn.x))
}
func (_ListParents__Repr) IsAbsent() bool {
	return false
}
func (_ListParents__Repr) IsNull() bool {
	return false
}
func (_ListParents__Repr) AsBool() (bool, error) {
	return mixins.List{"ipldgit.ListParents.Repr"}.AsBool()
}
func (_ListParents__Repr) AsInt() (int64, error) {
	return mixins.List{"ipldgit.ListParents.Repr"}.AsInt()
}
func (_ListParents__Repr) AsFloat() (float64, error) {
	return mixins.List{"ipldgit.ListParents.Repr"}.AsFloat()
}
func (_ListParents__Repr) AsString() (string, error) {
	return mixins.List{"ipldgit.ListParents.Repr"}.AsString()
}
func (_ListParents__Repr) AsBytes() ([]byte, error) {
	return mixins.List{"ipldgit.ListParents.Repr"}.AsBytes()
}
func (_ListParents__Repr) AsLink() (ipld.Link, error) {
	return mixins.List{"ipldgit.ListParents.Repr"}.AsLink()
}
func (_ListParents__Repr) Prototype() ipld.NodePrototype {
	return _ListParents__ReprPrototype{}
}
type _ListParents__ReprPrototype struct{}

func (_ListParents__ReprPrototype) NewBuilder() ipld.NodeBuilder {
	var nb _ListParents__ReprBuilder
	nb.Reset()
	return &nb
}
type _ListParents__ReprBuilder struct {
	_ListParents__ReprAssembler
}
func (nb *_ListParents__ReprBuilder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_ListParents__ReprBuilder) Reset() {
	var w _ListParents
	var m schema.Maybe
	*nb = _ListParents__ReprBuilder{_ListParents__ReprAssembler{w: &w, m: &m}}
}
type _ListParents__ReprAssembler struct {
	w *_ListParents
	m *schema.Maybe
	state laState

	cm schema.Maybe
	va _Link__ReprAssembler
}

func (na *_ListParents__ReprAssembler) reset() {
	na.state = laState_initial
	na.va.reset()
}
func (_ListParents__ReprAssembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	return mixins.ListAssembler{"ipldgit.ListParents.Repr"}.BeginMap(0)
}
func (na *_ListParents__ReprAssembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if sizeHint < 0 {
		sizeHint = 0
	}
	if na.w == nil {
		na.w = &_ListParents{}
	}
	if sizeHint > 0 {
		na.w.x = make([]_Link, 0, sizeHint)
	}
	return na, nil
}
func (na *_ListParents__ReprAssembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.ListAssembler{"ipldgit.ListParents.Repr.Repr"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_ListParents__ReprAssembler) AssignBool(bool) error {
	return mixins.ListAssembler{"ipldgit.ListParents.Repr"}.AssignBool(false)
}
func (_ListParents__ReprAssembler) AssignInt(int64) error {
	return mixins.ListAssembler{"ipldgit.ListParents.Repr"}.AssignInt(0)
}
func (_ListParents__ReprAssembler) AssignFloat(float64) error {
	return mixins.ListAssembler{"ipldgit.ListParents.Repr"}.AssignFloat(0)
}
func (_ListParents__ReprAssembler) AssignString(string) error {
	return mixins.ListAssembler{"ipldgit.ListParents.Repr"}.AssignString("")
}
func (_ListParents__ReprAssembler) AssignBytes([]byte) error {
	return mixins.ListAssembler{"ipldgit.ListParents.Repr"}.AssignBytes(nil)
}
func (_ListParents__ReprAssembler) AssignLink(ipld.Link) error {
	return mixins.ListAssembler{"ipldgit.ListParents.Repr"}.AssignLink(nil)
}
func (na *_ListParents__ReprAssembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_ListParents); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != ipld.Kind_List {
		return ipld.ErrWrongKind{TypeName: "ipldgit.ListParents.Repr", MethodName: "AssignNode", AppropriateKind: ipld.KindSet_JustList, ActualKind: v.Kind()}
	}
	itr := v.ListIterator()
	for !itr.Done() {
		_, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_ListParents__ReprAssembler) Prototype() ipld.NodePrototype {
	return _ListParents__ReprPrototype{}
}
func (la *_ListParents__ReprAssembler) valueFinishTidy() bool {
	switch la.cm {
	case schema.Maybe_Value:
		la.va.w = nil
		la.cm = schema.Maybe_Absent
		la.state = laState_initial
		la.va.reset()
		return true
	default:
		return false
	}
}
func (la *_ListParents__ReprAssembler) AssembleValue() ipld.NodeAssembler {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: AssembleValue cannot be called when still in the middle of assembling the previous value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	la.w.x = append(la.w.x, _Link{})
	la.state = laState_midValue
	row := &la.w.x[len(la.w.x)-1]
	la.va.w = row
	la.va.m = &la.cm
	return &la.va
}
func (la *_ListParents__ReprAssembler) Finish() error {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	la.state = laState_finished
	*la.m = schema.Maybe_Value
	return nil
}
func (la *_ListParents__ReprAssembler) ValuePrototype(_ int64) ipld.NodePrototype {
	return _Link__ReprPrototype{}
}

func (n *_ListString) Lookup(idx int64) String {
	if n.Length() <= idx {
		return nil
	}
	v := &n.x[idx]
	return v
}
func (n *_ListString) LookupMaybe(idx int64) MaybeString {
	if n.Length() <= idx {
		return nil
	}
	v := &n.x[idx]
	return &_String__Maybe{
		m: schema.Maybe_Value,
		v: v,
	}
}

var _ListString__valueAbsent = _String__Maybe{m:schema.Maybe_Absent}
func (n ListString) Iterator() *ListString__Itr {
	return &ListString__Itr{n, 0}
}

type ListString__Itr struct {
	n ListString
	idx  int
}

func (itr *ListString__Itr) Next() (idx int64, v String) {
	if itr.idx >= len(itr.n.x) {
		return -1, nil
	}
	idx = int64(itr.idx)
	v = &itr.n.x[itr.idx]
	itr.idx++
	return
}
func (itr *ListString__Itr) Done() bool {
	return itr.idx >= len(itr.n.x)
}

type _ListString__Maybe struct {
	m schema.Maybe
	v ListString
}
type MaybeListString = *_ListString__Maybe

func (m MaybeListString) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeListString) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeListString) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeListString) AsNode() ipld.Node {
	switch m.m {
		case schema.Maybe_Absent:
			return ipld.Absent
		case schema.Maybe_Null:
			return ipld.Null
		case schema.Maybe_Value:
			return m.v
		default:
			panic("unreachable")
	}
}
func (m MaybeListString) Must() ListString {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}
var _ ipld.Node = (ListString)(&_ListString{})
var _ schema.TypedNode = (ListString)(&_ListString{})
func (ListString) Kind() ipld.Kind {
	return ipld.Kind_List
}
func (ListString) LookupByString(string) (ipld.Node, error) {
	return mixins.List{"ipldgit.ListString"}.LookupByString("")
}
func (n ListString) LookupByNode(k ipld.Node) (ipld.Node, error) {
	idx, err := k.AsInt()
	if err != nil {
		return nil, err
	}
	return n.LookupByIndex(idx)
}
func (n ListString) LookupByIndex(idx int64) (ipld.Node, error) {
	if n.Length() <= idx {
		return nil, ipld.ErrNotExists{ipld.PathSegmentOfInt(idx)}
	}
	v := &n.x[idx]
	return v, nil
}
func (n ListString) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	i, err := seg.Index()
	if err != nil {
		return nil, ipld.ErrInvalidSegmentForList{TypeName: "ipldgit.ListString", TroubleSegment: seg, Reason: err}
	}
	return n.LookupByIndex(i)
}
func (ListString) MapIterator() ipld.MapIterator {
	return nil
}
func (n ListString) ListIterator() ipld.ListIterator {
	return &_ListString__ListItr{n, 0}
}

type _ListString__ListItr struct {
	n ListString
	idx  int
}

func (itr *_ListString__ListItr) Next() (idx int64, v ipld.Node, _ error) {
	if itr.idx >= len(itr.n.x) {
		return -1, nil, ipld.ErrIteratorOverread{}
	}
	idx = int64(itr.idx)
	x := &itr.n.x[itr.idx]
	v = x
	itr.idx++
	return
}
func (itr *_ListString__ListItr) Done() bool {
	return itr.idx >= len(itr.n.x)
}

func (n ListString) Length() int64 {
	return int64(len(n.x))
}
func (ListString) IsAbsent() bool {
	return false
}
func (ListString) IsNull() bool {
	return false
}
func (ListString) AsBool() (bool, error) {
	return mixins.List{"ipldgit.ListString"}.AsBool()
}
func (ListString) AsInt() (int64, error) {
	return mixins.List{"ipldgit.ListString"}.AsInt()
}
func (ListString) AsFloat() (float64, error) {
	return mixins.List{"ipldgit.ListString"}.AsFloat()
}
func (ListString) AsString() (string, error) {
	return mixins.List{"ipldgit.ListString"}.AsString()
}
func (ListString) AsBytes() ([]byte, error) {
	return mixins.List{"ipldgit.ListString"}.AsBytes()
}
func (ListString) AsLink() (ipld.Link, error) {
	return mixins.List{"ipldgit.ListString"}.AsLink()
}
func (ListString) Prototype() ipld.NodePrototype {
	return _ListString__Prototype{}
}
type _ListString__Prototype struct{}

func (_ListString__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _ListString__Builder
	nb.Reset()
	return &nb
}
type _ListString__Builder struct {
	_ListString__Assembler
}
func (nb *_ListString__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_ListString__Builder) Reset() {
	var w _ListString
	var m schema.Maybe
	*nb = _ListString__Builder{_ListString__Assembler{w: &w, m: &m}}
}
type _ListString__Assembler struct {
	w *_ListString
	m *schema.Maybe
	state laState

	cm schema.Maybe
	va _String__Assembler
}

func (na *_ListString__Assembler) reset() {
	na.state = laState_initial
	na.va.reset()
}
func (_ListString__Assembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	return mixins.ListAssembler{"ipldgit.ListString"}.BeginMap(0)
}
func (na *_ListString__Assembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if sizeHint < 0 {
		sizeHint = 0
	}
	if na.w == nil {
		na.w = &_ListString{}
	}
	if sizeHint > 0 {
		na.w.x = make([]_String, 0, sizeHint)
	}
	return na, nil
}
func (na *_ListString__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.ListAssembler{"ipldgit.ListString"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_ListString__Assembler) AssignBool(bool) error {
	return mixins.ListAssembler{"ipldgit.ListString"}.AssignBool(false)
}
func (_ListString__Assembler) AssignInt(int64) error {
	return mixins.ListAssembler{"ipldgit.ListString"}.AssignInt(0)
}
func (_ListString__Assembler) AssignFloat(float64) error {
	return mixins.ListAssembler{"ipldgit.ListString"}.AssignFloat(0)
}
func (_ListString__Assembler) AssignString(string) error {
	return mixins.ListAssembler{"ipldgit.ListString"}.AssignString("")
}
func (_ListString__Assembler) AssignBytes([]byte) error {
	return mixins.ListAssembler{"ipldgit.ListString"}.AssignBytes(nil)
}
func (_ListString__Assembler) AssignLink(ipld.Link) error {
	return mixins.ListAssembler{"ipldgit.ListString"}.AssignLink(nil)
}
func (na *_ListString__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_ListString); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != ipld.Kind_List {
		return ipld.ErrWrongKind{TypeName: "ipldgit.ListString", MethodName: "AssignNode", AppropriateKind: ipld.KindSet_JustList, ActualKind: v.Kind()}
	}
	itr := v.ListIterator()
	for !itr.Done() {
		_, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_ListString__Assembler) Prototype() ipld.NodePrototype {
	return _ListString__Prototype{}
}
func (la *_ListString__Assembler) valueFinishTidy() bool {
	switch la.cm {
	case schema.Maybe_Value:
		la.va.w = nil
		la.cm = schema.Maybe_Absent
		la.state = laState_initial
		la.va.reset()
		return true
	default:
		return false
	}
}
func (la *_ListString__Assembler) AssembleValue() ipld.NodeAssembler {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: AssembleValue cannot be called when still in the middle of assembling the previous value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	la.w.x = append(la.w.x, _String{})
	la.state = laState_midValue
	row := &la.w.x[len(la.w.x)-1]
	la.va.w = row
	la.va.m = &la.cm
	return &la.va
}
func (la *_ListString__Assembler) Finish() error {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	la.state = laState_finished
	*la.m = schema.Maybe_Value
	return nil
}
func (la *_ListString__Assembler) ValuePrototype(_ int64) ipld.NodePrototype {
	return _String__Prototype{}
}
func (ListString) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n ListString) Representation() ipld.Node {
	return (*_ListString__Repr)(n)
}
type _ListString__Repr _ListString
var _ ipld.Node = &_ListString__Repr{}
func (_ListString__Repr) Kind() ipld.Kind {
	return ipld.Kind_List
}
func (_ListString__Repr) LookupByString(string) (ipld.Node, error) {
	return mixins.List{"ipldgit.ListString.Repr"}.LookupByString("")
}
func (nr *_ListString__Repr) LookupByNode(k ipld.Node) (ipld.Node, error) {
	v, err := (ListString)(nr).LookupByNode(k)
	if err != nil || v == ipld.Null {
		return v, err
	}
	return v.(String).Representation(), nil
}
func (nr *_ListString__Repr) LookupByIndex(idx int64) (ipld.Node, error) {
	v, err := (ListString)(nr).LookupByIndex(idx)
	if err != nil || v == ipld.Null {
		return v, err
	}
	return v.(String).Representation(), nil
}
func (n _ListString__Repr) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	i, err := seg.Index()
	if err != nil {
		return nil, ipld.ErrInvalidSegmentForList{TypeName: "ipldgit.ListString.Repr", TroubleSegment: seg, Reason: err}
	}
	return n.LookupByIndex(i)
}
func (_ListString__Repr) MapIterator() ipld.MapIterator {
	return nil
}
func (nr *_ListString__Repr) ListIterator() ipld.ListIterator {
	return &_ListString__ReprListItr{(ListString)(nr), 0}
}

type _ListString__ReprListItr _ListString__ListItr

func (itr *_ListString__ReprListItr) Next() (idx int64, v ipld.Node, err error) {
	idx, v, err = (*_ListString__ListItr)(itr).Next()
	if err != nil || v == ipld.Null {
		return
	}
	return idx, v.(String).Representation(), nil
}
func (itr *_ListString__ReprListItr) Done() bool {
	return (*_ListString__ListItr)(itr).Done()
}

func (rn *_ListString__Repr) Length() int64 {
	return int64(len(rn.x))
}
func (_ListString__Repr) IsAbsent() bool {
	return false
}
func (_ListString__Repr) IsNull() bool {
	return false
}
func (_ListString__Repr) AsBool() (bool, error) {
	return mixins.List{"ipldgit.ListString.Repr"}.AsBool()
}
func (_ListString__Repr) AsInt() (int64, error) {
	return mixins.List{"ipldgit.ListString.Repr"}.AsInt()
}
func (_ListString__Repr) AsFloat() (float64, error) {
	return mixins.List{"ipldgit.ListString.Repr"}.AsFloat()
}
func (_ListString__Repr) AsString() (string, error) {
	return mixins.List{"ipldgit.ListString.Repr"}.AsString()
}
func (_ListString__Repr) AsBytes() ([]byte, error) {
	return mixins.List{"ipldgit.ListString.Repr"}.AsBytes()
}
func (_ListString__Repr) AsLink() (ipld.Link, error) {
	return mixins.List{"ipldgit.ListString.Repr"}.AsLink()
}
func (_ListString__Repr) Prototype() ipld.NodePrototype {
	return _ListString__ReprPrototype{}
}
type _ListString__ReprPrototype struct{}

func (_ListString__ReprPrototype) NewBuilder() ipld.NodeBuilder {
	var nb _ListString__ReprBuilder
	nb.Reset()
	return &nb
}
type _ListString__ReprBuilder struct {
	_ListString__ReprAssembler
}
func (nb *_ListString__ReprBuilder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_ListString__ReprBuilder) Reset() {
	var w _ListString
	var m schema.Maybe
	*nb = _ListString__ReprBuilder{_ListString__ReprAssembler{w: &w, m: &m}}
}
type _ListString__ReprAssembler struct {
	w *_ListString
	m *schema.Maybe
	state laState

	cm schema.Maybe
	va _String__ReprAssembler
}

func (na *_ListString__ReprAssembler) reset() {
	na.state = laState_initial
	na.va.reset()
}
func (_ListString__ReprAssembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	return mixins.ListAssembler{"ipldgit.ListString.Repr"}.BeginMap(0)
}
func (na *_ListString__ReprAssembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if sizeHint < 0 {
		sizeHint = 0
	}
	if na.w == nil {
		na.w = &_ListString{}
	}
	if sizeHint > 0 {
		na.w.x = make([]_String, 0, sizeHint)
	}
	return na, nil
}
func (na *_ListString__ReprAssembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.ListAssembler{"ipldgit.ListString.Repr.Repr"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_ListString__ReprAssembler) AssignBool(bool) error {
	return mixins.ListAssembler{"ipldgit.ListString.Repr"}.AssignBool(false)
}
func (_ListString__ReprAssembler) AssignInt(int64) error {
	return mixins.ListAssembler{"ipldgit.ListString.Repr"}.AssignInt(0)
}
func (_ListString__ReprAssembler) AssignFloat(float64) error {
	return mixins.ListAssembler{"ipldgit.ListString.Repr"}.AssignFloat(0)
}
func (_ListString__ReprAssembler) AssignString(string) error {
	return mixins.ListAssembler{"ipldgit.ListString.Repr"}.AssignString("")
}
func (_ListString__ReprAssembler) AssignBytes([]byte) error {
	return mixins.ListAssembler{"ipldgit.ListString.Repr"}.AssignBytes(nil)
}
func (_ListString__ReprAssembler) AssignLink(ipld.Link) error {
	return mixins.ListAssembler{"ipldgit.ListString.Repr"}.AssignLink(nil)
}
func (na *_ListString__ReprAssembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_ListString); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != ipld.Kind_List {
		return ipld.ErrWrongKind{TypeName: "ipldgit.ListString.Repr", MethodName: "AssignNode", AppropriateKind: ipld.KindSet_JustList, ActualKind: v.Kind()}
	}
	itr := v.ListIterator()
	for !itr.Done() {
		_, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_ListString__ReprAssembler) Prototype() ipld.NodePrototype {
	return _ListString__ReprPrototype{}
}
func (la *_ListString__ReprAssembler) valueFinishTidy() bool {
	switch la.cm {
	case schema.Maybe_Value:
		la.va.w = nil
		la.cm = schema.Maybe_Absent
		la.state = laState_initial
		la.va.reset()
		return true
	default:
		return false
	}
}
func (la *_ListString__ReprAssembler) AssembleValue() ipld.NodeAssembler {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: AssembleValue cannot be called when still in the middle of assembling the previous value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	la.w.x = append(la.w.x, _String{})
	la.state = laState_midValue
	row := &la.w.x[len(la.w.x)-1]
	la.va.w = row
	la.va.m = &la.cm
	return &la.va
}
func (la *_ListString__ReprAssembler) Finish() error {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	la.state = laState_finished
	*la.m = schema.Maybe_Value
	return nil
}
func (la *_ListString__ReprAssembler) ValuePrototype(_ int64) ipld.NodePrototype {
	return _String__ReprPrototype{}
}

func (n *_ListTag) Lookup(idx int64) Tag {
	if n.Length() <= idx {
		return nil
	}
	v := &n.x[idx]
	return v
}
func (n *_ListTag) LookupMaybe(idx int64) MaybeTag {
	if n.Length() <= idx {
		return nil
	}
	v := &n.x[idx]
	return &_Tag__Maybe{
		m: schema.Maybe_Value,
		v: v,
	}
}

var _ListTag__valueAbsent = _Tag__Maybe{m:schema.Maybe_Absent}
func (n ListTag) Iterator() *ListTag__Itr {
	return &ListTag__Itr{n, 0}
}

type ListTag__Itr struct {
	n ListTag
	idx  int
}

func (itr *ListTag__Itr) Next() (idx int64, v Tag) {
	if itr.idx >= len(itr.n.x) {
		return -1, nil
	}
	idx = int64(itr.idx)
	v = &itr.n.x[itr.idx]
	itr.idx++
	return
}
func (itr *ListTag__Itr) Done() bool {
	return itr.idx >= len(itr.n.x)
}

type _ListTag__Maybe struct {
	m schema.Maybe
	v ListTag
}
type MaybeListTag = *_ListTag__Maybe

func (m MaybeListTag) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeListTag) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeListTag) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeListTag) AsNode() ipld.Node {
	switch m.m {
		case schema.Maybe_Absent:
			return ipld.Absent
		case schema.Maybe_Null:
			return ipld.Null
		case schema.Maybe_Value:
			return m.v
		default:
			panic("unreachable")
	}
}
func (m MaybeListTag) Must() ListTag {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}
var _ ipld.Node = (ListTag)(&_ListTag{})
var _ schema.TypedNode = (ListTag)(&_ListTag{})
func (ListTag) Kind() ipld.Kind {
	return ipld.Kind_List
}
func (ListTag) LookupByString(string) (ipld.Node, error) {
	return mixins.List{"ipldgit.ListTag"}.LookupByString("")
}
func (n ListTag) LookupByNode(k ipld.Node) (ipld.Node, error) {
	idx, err := k.AsInt()
	if err != nil {
		return nil, err
	}
	return n.LookupByIndex(idx)
}
func (n ListTag) LookupByIndex(idx int64) (ipld.Node, error) {
	if n.Length() <= idx {
		return nil, ipld.ErrNotExists{ipld.PathSegmentOfInt(idx)}
	}
	v := &n.x[idx]
	return v, nil
}
func (n ListTag) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	i, err := seg.Index()
	if err != nil {
		return nil, ipld.ErrInvalidSegmentForList{TypeName: "ipldgit.ListTag", TroubleSegment: seg, Reason: err}
	}
	return n.LookupByIndex(i)
}
func (ListTag) MapIterator() ipld.MapIterator {
	return nil
}
func (n ListTag) ListIterator() ipld.ListIterator {
	return &_ListTag__ListItr{n, 0}
}

type _ListTag__ListItr struct {
	n ListTag
	idx  int
}

func (itr *_ListTag__ListItr) Next() (idx int64, v ipld.Node, _ error) {
	if itr.idx >= len(itr.n.x) {
		return -1, nil, ipld.ErrIteratorOverread{}
	}
	idx = int64(itr.idx)
	x := &itr.n.x[itr.idx]
	v = x
	itr.idx++
	return
}
func (itr *_ListTag__ListItr) Done() bool {
	return itr.idx >= len(itr.n.x)
}

func (n ListTag) Length() int64 {
	return int64(len(n.x))
}
func (ListTag) IsAbsent() bool {
	return false
}
func (ListTag) IsNull() bool {
	return false
}
func (ListTag) AsBool() (bool, error) {
	return mixins.List{"ipldgit.ListTag"}.AsBool()
}
func (ListTag) AsInt() (int64, error) {
	return mixins.List{"ipldgit.ListTag"}.AsInt()
}
func (ListTag) AsFloat() (float64, error) {
	return mixins.List{"ipldgit.ListTag"}.AsFloat()
}
func (ListTag) AsString() (string, error) {
	return mixins.List{"ipldgit.ListTag"}.AsString()
}
func (ListTag) AsBytes() ([]byte, error) {
	return mixins.List{"ipldgit.ListTag"}.AsBytes()
}
func (ListTag) AsLink() (ipld.Link, error) {
	return mixins.List{"ipldgit.ListTag"}.AsLink()
}
func (ListTag) Prototype() ipld.NodePrototype {
	return _ListTag__Prototype{}
}
type _ListTag__Prototype struct{}

func (_ListTag__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _ListTag__Builder
	nb.Reset()
	return &nb
}
type _ListTag__Builder struct {
	_ListTag__Assembler
}
func (nb *_ListTag__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_ListTag__Builder) Reset() {
	var w _ListTag
	var m schema.Maybe
	*nb = _ListTag__Builder{_ListTag__Assembler{w: &w, m: &m}}
}
type _ListTag__Assembler struct {
	w *_ListTag
	m *schema.Maybe
	state laState

	cm schema.Maybe
	va _Tag__Assembler
}

func (na *_ListTag__Assembler) reset() {
	na.state = laState_initial
	na.va.reset()
}
func (_ListTag__Assembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	return mixins.ListAssembler{"ipldgit.ListTag"}.BeginMap(0)
}
func (na *_ListTag__Assembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if sizeHint < 0 {
		sizeHint = 0
	}
	if na.w == nil {
		na.w = &_ListTag{}
	}
	if sizeHint > 0 {
		na.w.x = make([]_Tag, 0, sizeHint)
	}
	return na, nil
}
func (na *_ListTag__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.ListAssembler{"ipldgit.ListTag"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_ListTag__Assembler) AssignBool(bool) error {
	return mixins.ListAssembler{"ipldgit.ListTag"}.AssignBool(false)
}
func (_ListTag__Assembler) AssignInt(int64) error {
	return mixins.ListAssembler{"ipldgit.ListTag"}.AssignInt(0)
}
func (_ListTag__Assembler) AssignFloat(float64) error {
	return mixins.ListAssembler{"ipldgit.ListTag"}.AssignFloat(0)
}
func (_ListTag__Assembler) AssignString(string) error {
	return mixins.ListAssembler{"ipldgit.ListTag"}.AssignString("")
}
func (_ListTag__Assembler) AssignBytes([]byte) error {
	return mixins.ListAssembler{"ipldgit.ListTag"}.AssignBytes(nil)
}
func (_ListTag__Assembler) AssignLink(ipld.Link) error {
	return mixins.ListAssembler{"ipldgit.ListTag"}.AssignLink(nil)
}
func (na *_ListTag__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_ListTag); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != ipld.Kind_List {
		return ipld.ErrWrongKind{TypeName: "ipldgit.ListTag", MethodName: "AssignNode", AppropriateKind: ipld.KindSet_JustList, ActualKind: v.Kind()}
	}
	itr := v.ListIterator()
	for !itr.Done() {
		_, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_ListTag__Assembler) Prototype() ipld.NodePrototype {
	return _ListTag__Prototype{}
}
func (la *_ListTag__Assembler) valueFinishTidy() bool {
	switch la.cm {
	case schema.Maybe_Value:
		la.va.w = nil
		la.cm = schema.Maybe_Absent
		la.state = laState_initial
		la.va.reset()
		return true
	default:
		return false
	}
}
func (la *_ListTag__Assembler) AssembleValue() ipld.NodeAssembler {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: AssembleValue cannot be called when still in the middle of assembling the previous value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	la.w.x = append(la.w.x, _Tag{})
	la.state = laState_midValue
	row := &la.w.x[len(la.w.x)-1]
	la.va.w = row
	la.va.m = &la.cm
	return &la.va
}
func (la *_ListTag__Assembler) Finish() error {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	la.state = laState_finished
	*la.m = schema.Maybe_Value
	return nil
}
func (la *_ListTag__Assembler) ValuePrototype(_ int64) ipld.NodePrototype {
	return _Tag__Prototype{}
}
func (ListTag) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n ListTag) Representation() ipld.Node {
	return (*_ListTag__Repr)(n)
}
type _ListTag__Repr _ListTag
var _ ipld.Node = &_ListTag__Repr{}
func (_ListTag__Repr) Kind() ipld.Kind {
	return ipld.Kind_List
}
func (_ListTag__Repr) LookupByString(string) (ipld.Node, error) {
	return mixins.List{"ipldgit.ListTag.Repr"}.LookupByString("")
}
func (nr *_ListTag__Repr) LookupByNode(k ipld.Node) (ipld.Node, error) {
	v, err := (ListTag)(nr).LookupByNode(k)
	if err != nil || v == ipld.Null {
		return v, err
	}
	return v.(Tag).Representation(), nil
}
func (nr *_ListTag__Repr) LookupByIndex(idx int64) (ipld.Node, error) {
	v, err := (ListTag)(nr).LookupByIndex(idx)
	if err != nil || v == ipld.Null {
		return v, err
	}
	return v.(Tag).Representation(), nil
}
func (n _ListTag__Repr) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	i, err := seg.Index()
	if err != nil {
		return nil, ipld.ErrInvalidSegmentForList{TypeName: "ipldgit.ListTag.Repr", TroubleSegment: seg, Reason: err}
	}
	return n.LookupByIndex(i)
}
func (_ListTag__Repr) MapIterator() ipld.MapIterator {
	return nil
}
func (nr *_ListTag__Repr) ListIterator() ipld.ListIterator {
	return &_ListTag__ReprListItr{(ListTag)(nr), 0}
}

type _ListTag__ReprListItr _ListTag__ListItr

func (itr *_ListTag__ReprListItr) Next() (idx int64, v ipld.Node, err error) {
	idx, v, err = (*_ListTag__ListItr)(itr).Next()
	if err != nil || v == ipld.Null {
		return
	}
	return idx, v.(Tag).Representation(), nil
}
func (itr *_ListTag__ReprListItr) Done() bool {
	return (*_ListTag__ListItr)(itr).Done()
}

func (rn *_ListTag__Repr) Length() int64 {
	return int64(len(rn.x))
}
func (_ListTag__Repr) IsAbsent() bool {
	return false
}
func (_ListTag__Repr) IsNull() bool {
	return false
}
func (_ListTag__Repr) AsBool() (bool, error) {
	return mixins.List{"ipldgit.ListTag.Repr"}.AsBool()
}
func (_ListTag__Repr) AsInt() (int64, error) {
	return mixins.List{"ipldgit.ListTag.Repr"}.AsInt()
}
func (_ListTag__Repr) AsFloat() (float64, error) {
	return mixins.List{"ipldgit.ListTag.Repr"}.AsFloat()
}
func (_ListTag__Repr) AsString() (string, error) {
	return mixins.List{"ipldgit.ListTag.Repr"}.AsString()
}
func (_ListTag__Repr) AsBytes() ([]byte, error) {
	return mixins.List{"ipldgit.ListTag.Repr"}.AsBytes()
}
func (_ListTag__Repr) AsLink() (ipld.Link, error) {
	return mixins.List{"ipldgit.ListTag.Repr"}.AsLink()
}
func (_ListTag__Repr) Prototype() ipld.NodePrototype {
	return _ListTag__ReprPrototype{}
}
type _ListTag__ReprPrototype struct{}

func (_ListTag__ReprPrototype) NewBuilder() ipld.NodeBuilder {
	var nb _ListTag__ReprBuilder
	nb.Reset()
	return &nb
}
type _ListTag__ReprBuilder struct {
	_ListTag__ReprAssembler
}
func (nb *_ListTag__ReprBuilder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_ListTag__ReprBuilder) Reset() {
	var w _ListTag
	var m schema.Maybe
	*nb = _ListTag__ReprBuilder{_ListTag__ReprAssembler{w: &w, m: &m}}
}
type _ListTag__ReprAssembler struct {
	w *_ListTag
	m *schema.Maybe
	state laState

	cm schema.Maybe
	va _Tag__ReprAssembler
}

func (na *_ListTag__ReprAssembler) reset() {
	na.state = laState_initial
	na.va.reset()
}
func (_ListTag__ReprAssembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	return mixins.ListAssembler{"ipldgit.ListTag.Repr"}.BeginMap(0)
}
func (na *_ListTag__ReprAssembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if sizeHint < 0 {
		sizeHint = 0
	}
	if na.w == nil {
		na.w = &_ListTag{}
	}
	if sizeHint > 0 {
		na.w.x = make([]_Tag, 0, sizeHint)
	}
	return na, nil
}
func (na *_ListTag__ReprAssembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.ListAssembler{"ipldgit.ListTag.Repr.Repr"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_ListTag__ReprAssembler) AssignBool(bool) error {
	return mixins.ListAssembler{"ipldgit.ListTag.Repr"}.AssignBool(false)
}
func (_ListTag__ReprAssembler) AssignInt(int64) error {
	return mixins.ListAssembler{"ipldgit.ListTag.Repr"}.AssignInt(0)
}
func (_ListTag__ReprAssembler) AssignFloat(float64) error {
	return mixins.ListAssembler{"ipldgit.ListTag.Repr"}.AssignFloat(0)
}
func (_ListTag__ReprAssembler) AssignString(string) error {
	return mixins.ListAssembler{"ipldgit.ListTag.Repr"}.AssignString("")
}
func (_ListTag__ReprAssembler) AssignBytes([]byte) error {
	return mixins.ListAssembler{"ipldgit.ListTag.Repr"}.AssignBytes(nil)
}
func (_ListTag__ReprAssembler) AssignLink(ipld.Link) error {
	return mixins.ListAssembler{"ipldgit.ListTag.Repr"}.AssignLink(nil)
}
func (na *_ListTag__ReprAssembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_ListTag); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != ipld.Kind_List {
		return ipld.ErrWrongKind{TypeName: "ipldgit.ListTag.Repr", MethodName: "AssignNode", AppropriateKind: ipld.KindSet_JustList, ActualKind: v.Kind()}
	}
	itr := v.ListIterator()
	for !itr.Done() {
		_, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_ListTag__ReprAssembler) Prototype() ipld.NodePrototype {
	return _ListTag__ReprPrototype{}
}
func (la *_ListTag__ReprAssembler) valueFinishTidy() bool {
	switch la.cm {
	case schema.Maybe_Value:
		la.va.w = nil
		la.cm = schema.Maybe_Absent
		la.state = laState_initial
		la.va.reset()
		return true
	default:
		return false
	}
}
func (la *_ListTag__ReprAssembler) AssembleValue() ipld.NodeAssembler {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: AssembleValue cannot be called when still in the middle of assembling the previous value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	la.w.x = append(la.w.x, _Tag{})
	la.state = laState_midValue
	row := &la.w.x[len(la.w.x)-1]
	la.va.w = row
	la.va.m = &la.cm
	return &la.va
}
func (la *_ListTag__ReprAssembler) Finish() error {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	la.state = laState_finished
	*la.m = schema.Maybe_Value
	return nil
}
func (la *_ListTag__ReprAssembler) ValuePrototype(_ int64) ipld.NodePrototype {
	return _Tag__ReprPrototype{}
}


func (n _PersonInfo) FieldName() String {
	return &n.Name
}
func (n _PersonInfo) FieldEmail() String {
	return &n.Email
}
func (n _PersonInfo) FieldDate() String {
	return &n.Date
}
func (n _PersonInfo) FieldTimezone() String {
	return &n.Timezone
}
type _PersonInfo__Maybe struct {
	m schema.Maybe
	v PersonInfo
}
type MaybePersonInfo = *_PersonInfo__Maybe

func (m MaybePersonInfo) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybePersonInfo) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybePersonInfo) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybePersonInfo) AsNode() ipld.Node {
	switch m.m {
		case schema.Maybe_Absent:
			return ipld.Absent
		case schema.Maybe_Null:
			return ipld.Null
		case schema.Maybe_Value:
			return m.v
		default:
			panic("unreachable")
	}
}
func (m MaybePersonInfo) Must() PersonInfo {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}
var (
	fieldName__PersonInfo_Name = _String{"Name"}
	fieldName__PersonInfo_Email = _String{"Email"}
	fieldName__PersonInfo_Date = _String{"Date"}
	fieldName__PersonInfo_Timezone = _String{"Timezone"}
)
var _ ipld.Node = (PersonInfo)(&_PersonInfo{})
var _ schema.TypedNode = (PersonInfo)(&_PersonInfo{})
func (PersonInfo) Kind() ipld.Kind {
	return ipld.Kind_Map
}
func (n PersonInfo) LookupByString(key string) (ipld.Node, error) {
	switch key {
	case "Name":
		return &n.Name, nil
	case "Email":
		return &n.Email, nil
	case "Date":
		return &n.Date, nil
	case "Timezone":
		return &n.Timezone, nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfString(key)}
	}
}
func (n PersonInfo) LookupByNode(key ipld.Node) (ipld.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (PersonInfo) LookupByIndex(idx int64) (ipld.Node, error) {
	return mixins.Map{"ipldgit.PersonInfo"}.LookupByIndex(0)
}
func (n PersonInfo) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return n.LookupByString(seg.String())
}
func (n PersonInfo) MapIterator() ipld.MapIterator {
	return &_PersonInfo__MapItr{n, 0}
}

type _PersonInfo__MapItr struct {
	n PersonInfo
	idx  int
}

func (itr *_PersonInfo__MapItr) Next() (k ipld.Node, v ipld.Node, _ error) {
	if itr.idx >= 4 {
		return nil, nil, ipld.ErrIteratorOverread{}
	}
	switch itr.idx {
	case 0:
		k = &fieldName__PersonInfo_Name
		v = &itr.n.Name
	case 1:
		k = &fieldName__PersonInfo_Email
		v = &itr.n.Email
	case 2:
		k = &fieldName__PersonInfo_Date
		v = &itr.n.Date
	case 3:
		k = &fieldName__PersonInfo_Timezone
		v = &itr.n.Timezone
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_PersonInfo__MapItr) Done() bool {
	return itr.idx >= 4
}

func (PersonInfo) ListIterator() ipld.ListIterator {
	return nil
}
func (PersonInfo) Length() int64 {
	return 4
}
func (PersonInfo) IsAbsent() bool {
	return false
}
func (PersonInfo) IsNull() bool {
	return false
}
func (PersonInfo) AsBool() (bool, error) {
	return mixins.Map{"ipldgit.PersonInfo"}.AsBool()
}
func (PersonInfo) AsInt() (int64, error) {
	return mixins.Map{"ipldgit.PersonInfo"}.AsInt()
}
func (PersonInfo) AsFloat() (float64, error) {
	return mixins.Map{"ipldgit.PersonInfo"}.AsFloat()
}
func (PersonInfo) AsString() (string, error) {
	return mixins.Map{"ipldgit.PersonInfo"}.AsString()
}
func (PersonInfo) AsBytes() ([]byte, error) {
	return mixins.Map{"ipldgit.PersonInfo"}.AsBytes()
}
func (PersonInfo) AsLink() (ipld.Link, error) {
	return mixins.Map{"ipldgit.PersonInfo"}.AsLink()
}
func (PersonInfo) Prototype() ipld.NodePrototype {
	return _PersonInfo__Prototype{}
}
type _PersonInfo__Prototype struct{}

func (_PersonInfo__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _PersonInfo__Builder
	nb.Reset()
	return &nb
}
type _PersonInfo__Builder struct {
	_PersonInfo__Assembler
}
func (nb *_PersonInfo__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_PersonInfo__Builder) Reset() {
	var w _PersonInfo
	var m schema.Maybe
	*nb = _PersonInfo__Builder{_PersonInfo__Assembler{w: &w, m: &m}}
}
type _PersonInfo__Assembler struct {
	w *_PersonInfo
	m *schema.Maybe
	state maState
	s int
	f int

	cm schema.Maybe
	ca_Name _String__Assembler
	ca_Email _String__Assembler
	ca_Date _String__Assembler
	ca_Timezone _String__Assembler
	}

func (na *_PersonInfo__Assembler) reset() {
	na.state = maState_initial
	na.s = 0
	na.ca_Name.reset()
	na.ca_Email.reset()
	na.ca_Date.reset()
	na.ca_Timezone.reset()
}

var (
	fieldBit__PersonInfo_Name = 1 << 0
	fieldBit__PersonInfo_Email = 1 << 1
	fieldBit__PersonInfo_Date = 1 << 2
	fieldBit__PersonInfo_Timezone = 1 << 3
	fieldBits__PersonInfo_sufficient = 0 + 1 << 0 + 1 << 1 + 1 << 2 + 1 << 3
)
func (na *_PersonInfo__Assembler) BeginMap(int64) (ipld.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_PersonInfo{}
	}
	return na, nil
}
func (_PersonInfo__Assembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.MapAssembler{"ipldgit.PersonInfo"}.BeginList(0)
}
func (na *_PersonInfo__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{"ipldgit.PersonInfo"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_PersonInfo__Assembler) AssignBool(bool) error {
	return mixins.MapAssembler{"ipldgit.PersonInfo"}.AssignBool(false)
}
func (_PersonInfo__Assembler) AssignInt(int64) error {
	return mixins.MapAssembler{"ipldgit.PersonInfo"}.AssignInt(0)
}
func (_PersonInfo__Assembler) AssignFloat(float64) error {
	return mixins.MapAssembler{"ipldgit.PersonInfo"}.AssignFloat(0)
}
func (_PersonInfo__Assembler) AssignString(string) error {
	return mixins.MapAssembler{"ipldgit.PersonInfo"}.AssignString("")
}
func (_PersonInfo__Assembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{"ipldgit.PersonInfo"}.AssignBytes(nil)
}
func (_PersonInfo__Assembler) AssignLink(ipld.Link) error {
	return mixins.MapAssembler{"ipldgit.PersonInfo"}.AssignLink(nil)
}
func (na *_PersonInfo__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_PersonInfo); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != ipld.Kind_Map {
		return ipld.ErrWrongKind{TypeName: "ipldgit.PersonInfo", MethodName: "AssignNode", AppropriateKind: ipld.KindSet_JustMap, ActualKind: v.Kind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_PersonInfo__Assembler) Prototype() ipld.NodePrototype {
	return _PersonInfo__Prototype{}
}
func (ma *_PersonInfo__Assembler) valueFinishTidy() bool {
	switch ma.f {
	case 0:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_Name.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 1:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_Email.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 2:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_Date.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 3:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_Timezone.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	default:
		panic("unreachable")
	}
}
func (ma *_PersonInfo__Assembler) AssembleEntry(k string) (ipld.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	switch k {
	case "Name":
		if ma.s & fieldBit__PersonInfo_Name != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__PersonInfo_Name}
		}
		ma.s += fieldBit__PersonInfo_Name
		ma.state = maState_midValue
		ma.f = 0
		ma.ca_Name.w = &ma.w.Name
		ma.ca_Name.m = &ma.cm
		return &ma.ca_Name, nil
	case "Email":
		if ma.s & fieldBit__PersonInfo_Email != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__PersonInfo_Email}
		}
		ma.s += fieldBit__PersonInfo_Email
		ma.state = maState_midValue
		ma.f = 1
		ma.ca_Email.w = &ma.w.Email
		ma.ca_Email.m = &ma.cm
		return &ma.ca_Email, nil
	case "Date":
		if ma.s & fieldBit__PersonInfo_Date != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__PersonInfo_Date}
		}
		ma.s += fieldBit__PersonInfo_Date
		ma.state = maState_midValue
		ma.f = 2
		ma.ca_Date.w = &ma.w.Date
		ma.ca_Date.m = &ma.cm
		return &ma.ca_Date, nil
	case "Timezone":
		if ma.s & fieldBit__PersonInfo_Timezone != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__PersonInfo_Timezone}
		}
		ma.s += fieldBit__PersonInfo_Timezone
		ma.state = maState_midValue
		ma.f = 3
		ma.ca_Timezone.w = &ma.w.Timezone
		ma.ca_Timezone.m = &ma.cm
		return &ma.ca_Timezone, nil
	default:
		return nil, ipld.ErrInvalidKey{TypeName:"ipldgit.PersonInfo", Key:&_String{k}}
	}
}
func (ma *_PersonInfo__Assembler) AssembleKey() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_PersonInfo__KeyAssembler)(ma)
}
func (ma *_PersonInfo__Assembler) AssembleValue() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.f {
	case 0:
		ma.ca_Name.w = &ma.w.Name
		ma.ca_Name.m = &ma.cm
		return &ma.ca_Name
	case 1:
		ma.ca_Email.w = &ma.w.Email
		ma.ca_Email.m = &ma.cm
		return &ma.ca_Email
	case 2:
		ma.ca_Date.w = &ma.w.Date
		ma.ca_Date.m = &ma.cm
		return &ma.ca_Date
	case 3:
		ma.ca_Timezone.w = &ma.w.Timezone
		ma.ca_Timezone.m = &ma.cm
		return &ma.ca_Timezone
	default:
		panic("unreachable")
	}
}
func (ma *_PersonInfo__Assembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	if ma.s & fieldBits__PersonInfo_sufficient != fieldBits__PersonInfo_sufficient {
		err := ipld.ErrMissingRequiredField{Missing: make([]string, 0)}
		if ma.s & fieldBit__PersonInfo_Name == 0 {
			err.Missing = append(err.Missing, "Name")
		}
		if ma.s & fieldBit__PersonInfo_Email == 0 {
			err.Missing = append(err.Missing, "Email")
		}
		if ma.s & fieldBit__PersonInfo_Date == 0 {
			err.Missing = append(err.Missing, "Date")
		}
		if ma.s & fieldBit__PersonInfo_Timezone == 0 {
			err.Missing = append(err.Missing, "Timezone")
		}
		return err
	}
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_PersonInfo__Assembler) KeyPrototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (ma *_PersonInfo__Assembler) ValuePrototype(k string) ipld.NodePrototype {
	panic("todo structbuilder mapassembler valueprototype")
}
type _PersonInfo__KeyAssembler _PersonInfo__Assembler
func (_PersonInfo__KeyAssembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	return mixins.StringAssembler{"ipldgit.PersonInfo.KeyAssembler"}.BeginMap(0)
}
func (_PersonInfo__KeyAssembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.StringAssembler{"ipldgit.PersonInfo.KeyAssembler"}.BeginList(0)
}
func (na *_PersonInfo__KeyAssembler) AssignNull() error {
	return mixins.StringAssembler{"ipldgit.PersonInfo.KeyAssembler"}.AssignNull()
}
func (_PersonInfo__KeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{"ipldgit.PersonInfo.KeyAssembler"}.AssignBool(false)
}
func (_PersonInfo__KeyAssembler) AssignInt(int64) error {
	return mixins.StringAssembler{"ipldgit.PersonInfo.KeyAssembler"}.AssignInt(0)
}
func (_PersonInfo__KeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{"ipldgit.PersonInfo.KeyAssembler"}.AssignFloat(0)
}
func (ka *_PersonInfo__KeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	switch k {
	case "Name":
		if ka.s & fieldBit__PersonInfo_Name != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__PersonInfo_Name}
		}
		ka.s += fieldBit__PersonInfo_Name
		ka.state = maState_expectValue
		ka.f = 0
	case "Email":
		if ka.s & fieldBit__PersonInfo_Email != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__PersonInfo_Email}
		}
		ka.s += fieldBit__PersonInfo_Email
		ka.state = maState_expectValue
		ka.f = 1
	case "Date":
		if ka.s & fieldBit__PersonInfo_Date != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__PersonInfo_Date}
		}
		ka.s += fieldBit__PersonInfo_Date
		ka.state = maState_expectValue
		ka.f = 2
	case "Timezone":
		if ka.s & fieldBit__PersonInfo_Timezone != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__PersonInfo_Timezone}
		}
		ka.s += fieldBit__PersonInfo_Timezone
		ka.state = maState_expectValue
		ka.f = 3
	default:
		return ipld.ErrInvalidKey{TypeName:"ipldgit.PersonInfo", Key:&_String{k}}
	}
	return nil
}
func (_PersonInfo__KeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{"ipldgit.PersonInfo.KeyAssembler"}.AssignBytes(nil)
}
func (_PersonInfo__KeyAssembler) AssignLink(ipld.Link) error {
	return mixins.StringAssembler{"ipldgit.PersonInfo.KeyAssembler"}.AssignLink(nil)
}
func (ka *_PersonInfo__KeyAssembler) AssignNode(v ipld.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_PersonInfo__KeyAssembler) Prototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (PersonInfo) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n PersonInfo) Representation() ipld.Node {
	return (*_PersonInfo__Repr)(n)
}
type _PersonInfo__Repr _PersonInfo
var _ ipld.Node = &_PersonInfo__Repr{}
func (_PersonInfo__Repr) Kind() ipld.Kind {
	return ipld.Kind_String
}
func (_PersonInfo__Repr) LookupByString(string) (ipld.Node, error) {
	return mixins.String{"ipldgit.PersonInfo.Repr"}.LookupByString("")
}
func (_PersonInfo__Repr) LookupByNode(ipld.Node) (ipld.Node, error) {
	return mixins.String{"ipldgit.PersonInfo.Repr"}.LookupByNode(nil)
}
func (_PersonInfo__Repr) LookupByIndex(idx int64) (ipld.Node, error) {
	return mixins.String{"ipldgit.PersonInfo.Repr"}.LookupByIndex(0)
}
func (_PersonInfo__Repr) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return mixins.String{"ipldgit.PersonInfo.Repr"}.LookupBySegment(seg)
}
func (_PersonInfo__Repr) MapIterator() ipld.MapIterator {
	return nil
}
func (_PersonInfo__Repr) ListIterator() ipld.ListIterator {
	return nil
}
func (_PersonInfo__Repr) Length() int64 {
	return -1
}
func (_PersonInfo__Repr) IsAbsent() bool {
	return false
}
func (_PersonInfo__Repr) IsNull() bool {
	return false
}
func (_PersonInfo__Repr) AsBool() (bool, error) {
	return mixins.String{"ipldgit.PersonInfo.Repr"}.AsBool()
}
func (_PersonInfo__Repr) AsInt() (int64, error) {
	return mixins.String{"ipldgit.PersonInfo.Repr"}.AsInt()
}
func (_PersonInfo__Repr) AsFloat() (float64, error) {
	return mixins.String{"ipldgit.PersonInfo.Repr"}.AsFloat()
}
func (n *_PersonInfo__Repr) AsString() (string, error) {
	return n.String(), nil
}
func (n *_PersonInfo__Repr) String() string {
	return (*_String__Repr)(&n.Name).String() + " " + (*_String__Repr)(&n.Email).String() + " " + (*_String__Repr)(&n.Date).String() + " " + (*_String__Repr)(&n.Timezone).String()
}
func (n PersonInfo) String() string {
	return (*_PersonInfo__Repr)(n).String()
}
func (_PersonInfo__Repr) AsBytes() ([]byte, error) {
	return mixins.String{"ipldgit.PersonInfo.Repr"}.AsBytes()
}
func (_PersonInfo__Repr) AsLink() (ipld.Link, error) {
	return mixins.String{"ipldgit.PersonInfo.Repr"}.AsLink()
}
func (_PersonInfo__Repr) Prototype() ipld.NodePrototype {
	return _PersonInfo__ReprPrototype{}
}
type _PersonInfo__ReprPrototype struct{}

func (_PersonInfo__ReprPrototype) NewBuilder() ipld.NodeBuilder {
	var nb _PersonInfo__ReprBuilder
	nb.Reset()
	return &nb
}
type _PersonInfo__ReprBuilder struct {
	_PersonInfo__ReprAssembler
}
func (nb *_PersonInfo__ReprBuilder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_PersonInfo__ReprBuilder) Reset() {
	var w _PersonInfo
	var m schema.Maybe
	*nb = _PersonInfo__ReprBuilder{_PersonInfo__ReprAssembler{w: &w, m: &m}}
}
func (_PersonInfo__ReprPrototype) fromString(w *_PersonInfo, v string) error {
	ss, err := mixins.SplitExact(v, " ", 4)
	if err != nil {
		return ipld.ErrUnmatchable{TypeName:"ipldgit.PersonInfo.Repr", Reason: err}
	}
	if err := (_String__ReprPrototype{}).fromString(&w.Name, ss[0]); err != nil {
		return ipld.ErrUnmatchable{TypeName:"ipldgit.PersonInfo.Repr", Reason: err}
	}
	if err := (_String__ReprPrototype{}).fromString(&w.Email, ss[1]); err != nil {
		return ipld.ErrUnmatchable{TypeName:"ipldgit.PersonInfo.Repr", Reason: err}
	}
	if err := (_String__ReprPrototype{}).fromString(&w.Date, ss[2]); err != nil {
		return ipld.ErrUnmatchable{TypeName:"ipldgit.PersonInfo.Repr", Reason: err}
	}
	if err := (_String__ReprPrototype{}).fromString(&w.Timezone, ss[3]); err != nil {
		return ipld.ErrUnmatchable{TypeName:"ipldgit.PersonInfo.Repr", Reason: err}
	}
	return nil
}
type _PersonInfo__ReprAssembler struct {
	w *_PersonInfo
	m *schema.Maybe
}

func (na *_PersonInfo__ReprAssembler) reset() {}
func (_PersonInfo__ReprAssembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	return mixins.StringAssembler{"ipldgit.PersonInfo.Repr"}.BeginMap(0)
}
func (_PersonInfo__ReprAssembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.StringAssembler{"ipldgit.PersonInfo.Repr"}.BeginList(0)
}
func (na *_PersonInfo__ReprAssembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.StringAssembler{"ipldgit.PersonInfo.Repr.Repr"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	panic("unreachable")
}
func (_PersonInfo__ReprAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{"ipldgit.PersonInfo.Repr"}.AssignBool(false)
}
func (_PersonInfo__ReprAssembler) AssignInt(int64) error {
	return mixins.StringAssembler{"ipldgit.PersonInfo.Repr"}.AssignInt(0)
}
func (_PersonInfo__ReprAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{"ipldgit.PersonInfo.Repr"}.AssignFloat(0)
}
func (na *_PersonInfo__ReprAssembler) AssignString(v string) error {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	if na.w == nil {
		na.w = &_PersonInfo{}
	}
	if err := (_PersonInfo__ReprPrototype{}).fromString(na.w, v); err != nil {
		return err
	}
	*na.m = schema.Maybe_Value
	return nil
}
func (_PersonInfo__ReprAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{"ipldgit.PersonInfo.Repr"}.AssignBytes(nil)
}
func (_PersonInfo__ReprAssembler) AssignLink(ipld.Link) error {
	return mixins.StringAssembler{"ipldgit.PersonInfo.Repr"}.AssignLink(nil)
}
func (na *_PersonInfo__ReprAssembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_PersonInfo); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return na.AssignString(v2)
	}
}
func (_PersonInfo__ReprAssembler) Prototype() ipld.NodePrototype {
	return _PersonInfo__ReprPrototype{}
}

func (n String) String() string {
	return n.x
}
func (_String__Prototype) fromString(w *_String, v string) error {
	*w = _String{v}
	return nil
}
func (_String__Prototype) FromString(v string) (String, error) {
	n := _String{v}
	return &n, nil
}
type _String__Maybe struct {
	m schema.Maybe
	v String
}
type MaybeString = *_String__Maybe

func (m MaybeString) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeString) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeString) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeString) AsNode() ipld.Node {
	switch m.m {
		case schema.Maybe_Absent:
			return ipld.Absent
		case schema.Maybe_Null:
			return ipld.Null
		case schema.Maybe_Value:
			return m.v
		default:
			panic("unreachable")
	}
}
func (m MaybeString) Must() String {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}
var _ ipld.Node = (String)(&_String{})
var _ schema.TypedNode = (String)(&_String{})
func (String) Kind() ipld.Kind {
	return ipld.Kind_String
}
func (String) LookupByString(string) (ipld.Node, error) {
	return mixins.String{"ipldgit.String"}.LookupByString("")
}
func (String) LookupByNode(ipld.Node) (ipld.Node, error) {
	return mixins.String{"ipldgit.String"}.LookupByNode(nil)
}
func (String) LookupByIndex(idx int64) (ipld.Node, error) {
	return mixins.String{"ipldgit.String"}.LookupByIndex(0)
}
func (String) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return mixins.String{"ipldgit.String"}.LookupBySegment(seg)
}
func (String) MapIterator() ipld.MapIterator {
	return nil
}
func (String) ListIterator() ipld.ListIterator {
	return nil
}
func (String) Length() int64 {
	return -1
}
func (String) IsAbsent() bool {
	return false
}
func (String) IsNull() bool {
	return false
}
func (String) AsBool() (bool, error) {
	return mixins.String{"ipldgit.String"}.AsBool()
}
func (String) AsInt() (int64, error) {
	return mixins.String{"ipldgit.String"}.AsInt()
}
func (String) AsFloat() (float64, error) {
	return mixins.String{"ipldgit.String"}.AsFloat()
}
func (n String) AsString() (string, error) {
	return n.x, nil
}
func (String) AsBytes() ([]byte, error) {
	return mixins.String{"ipldgit.String"}.AsBytes()
}
func (String) AsLink() (ipld.Link, error) {
	return mixins.String{"ipldgit.String"}.AsLink()
}
func (String) Prototype() ipld.NodePrototype {
	return _String__Prototype{}
}
type _String__Prototype struct{}

func (_String__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _String__Builder
	nb.Reset()
	return &nb
}
type _String__Builder struct {
	_String__Assembler
}
func (nb *_String__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_String__Builder) Reset() {
	var w _String
	var m schema.Maybe
	*nb = _String__Builder{_String__Assembler{w: &w, m: &m}}
}
type _String__Assembler struct {
	w *_String
	m *schema.Maybe
}

func (na *_String__Assembler) reset() {}
func (_String__Assembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	return mixins.StringAssembler{"ipldgit.String"}.BeginMap(0)
}
func (_String__Assembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.StringAssembler{"ipldgit.String"}.BeginList(0)
}
func (na *_String__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.StringAssembler{"ipldgit.String"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	panic("unreachable")
}
func (_String__Assembler) AssignBool(bool) error {
	return mixins.StringAssembler{"ipldgit.String"}.AssignBool(false)
}
func (_String__Assembler) AssignInt(int64) error {
	return mixins.StringAssembler{"ipldgit.String"}.AssignInt(0)
}
func (_String__Assembler) AssignFloat(float64) error {
	return mixins.StringAssembler{"ipldgit.String"}.AssignFloat(0)
}
func (na *_String__Assembler) AssignString(v string) error {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	if na.w == nil {
		na.w = &_String{}
	}
	na.w.x = v
	*na.m = schema.Maybe_Value
	return nil
}
func (_String__Assembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{"ipldgit.String"}.AssignBytes(nil)
}
func (_String__Assembler) AssignLink(ipld.Link) error {
	return mixins.StringAssembler{"ipldgit.String"}.AssignLink(nil)
}
func (na *_String__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_String); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return na.AssignString(v2)
	}
}
func (_String__Assembler) Prototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (String) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n String) Representation() ipld.Node {
	return (*_String__Repr)(n)
}
type _String__Repr = _String
var _ ipld.Node = &_String__Repr{}
type _String__ReprPrototype = _String__Prototype
type _String__ReprAssembler = _String__Assembler


func (n _Tag) FieldObject() Link {
	return &n.Object
}
func (n _Tag) FieldTagType() String {
	return &n.TagType
}
func (n _Tag) FieldTag() String {
	return &n.Tag
}
func (n _Tag) FieldTagger() PersonInfo {
	return &n.Tagger
}
func (n _Tag) FieldText() String {
	return &n.Text
}
func (n _Tag) FieldDataSize() MaybeString {
	return &n.DataSize
}
type _Tag__Maybe struct {
	m schema.Maybe
	v Tag
}
type MaybeTag = *_Tag__Maybe

func (m MaybeTag) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeTag) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeTag) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeTag) AsNode() ipld.Node {
	switch m.m {
		case schema.Maybe_Absent:
			return ipld.Absent
		case schema.Maybe_Null:
			return ipld.Null
		case schema.Maybe_Value:
			return m.v
		default:
			panic("unreachable")
	}
}
func (m MaybeTag) Must() Tag {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}
var (
	fieldName__Tag_Object = _String{"Object"}
	fieldName__Tag_TagType = _String{"TagType"}
	fieldName__Tag_Tag = _String{"Tag"}
	fieldName__Tag_Tagger = _String{"Tagger"}
	fieldName__Tag_Text = _String{"Text"}
	fieldName__Tag_DataSize = _String{"DataSize"}
)
var _ ipld.Node = (Tag)(&_Tag{})
var _ schema.TypedNode = (Tag)(&_Tag{})
func (Tag) Kind() ipld.Kind {
	return ipld.Kind_Map
}
func (n Tag) LookupByString(key string) (ipld.Node, error) {
	switch key {
	case "Object":
		return &n.Object, nil
	case "TagType":
		return &n.TagType, nil
	case "Tag":
		return &n.Tag, nil
	case "Tagger":
		return &n.Tagger, nil
	case "Text":
		return &n.Text, nil
	case "DataSize":
		if n.DataSize.m == schema.Maybe_Absent {
			return ipld.Absent, nil
		}
		return n.DataSize.v, nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfString(key)}
	}
}
func (n Tag) LookupByNode(key ipld.Node) (ipld.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (Tag) LookupByIndex(idx int64) (ipld.Node, error) {
	return mixins.Map{"ipldgit.Tag"}.LookupByIndex(0)
}
func (n Tag) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return n.LookupByString(seg.String())
}
func (n Tag) MapIterator() ipld.MapIterator {
	return &_Tag__MapItr{n, 0}
}

type _Tag__MapItr struct {
	n Tag
	idx  int
}

func (itr *_Tag__MapItr) Next() (k ipld.Node, v ipld.Node, _ error) {
	if itr.idx >= 6 {
		return nil, nil, ipld.ErrIteratorOverread{}
	}
	switch itr.idx {
	case 0:
		k = &fieldName__Tag_Object
		v = &itr.n.Object
	case 1:
		k = &fieldName__Tag_TagType
		v = &itr.n.TagType
	case 2:
		k = &fieldName__Tag_Tag
		v = &itr.n.Tag
	case 3:
		k = &fieldName__Tag_Tagger
		v = &itr.n.Tagger
	case 4:
		k = &fieldName__Tag_Text
		v = &itr.n.Text
	case 5:
		k = &fieldName__Tag_DataSize
		if itr.n.DataSize.m == schema.Maybe_Absent {
			v = ipld.Absent
			break
		}
		v = itr.n.DataSize.v
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_Tag__MapItr) Done() bool {
	return itr.idx >= 6
}

func (Tag) ListIterator() ipld.ListIterator {
	return nil
}
func (Tag) Length() int64 {
	return 6
}
func (Tag) IsAbsent() bool {
	return false
}
func (Tag) IsNull() bool {
	return false
}
func (Tag) AsBool() (bool, error) {
	return mixins.Map{"ipldgit.Tag"}.AsBool()
}
func (Tag) AsInt() (int64, error) {
	return mixins.Map{"ipldgit.Tag"}.AsInt()
}
func (Tag) AsFloat() (float64, error) {
	return mixins.Map{"ipldgit.Tag"}.AsFloat()
}
func (Tag) AsString() (string, error) {
	return mixins.Map{"ipldgit.Tag"}.AsString()
}
func (Tag) AsBytes() ([]byte, error) {
	return mixins.Map{"ipldgit.Tag"}.AsBytes()
}
func (Tag) AsLink() (ipld.Link, error) {
	return mixins.Map{"ipldgit.Tag"}.AsLink()
}
func (Tag) Prototype() ipld.NodePrototype {
	return _Tag__Prototype{}
}
type _Tag__Prototype struct{}

func (_Tag__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _Tag__Builder
	nb.Reset()
	return &nb
}
type _Tag__Builder struct {
	_Tag__Assembler
}
func (nb *_Tag__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Tag__Builder) Reset() {
	var w _Tag
	var m schema.Maybe
	*nb = _Tag__Builder{_Tag__Assembler{w: &w, m: &m}}
}
type _Tag__Assembler struct {
	w *_Tag
	m *schema.Maybe
	state maState
	s int
	f int

	cm schema.Maybe
	ca_Object _Link__Assembler
	ca_TagType _String__Assembler
	ca_Tag _String__Assembler
	ca_Tagger _PersonInfo__Assembler
	ca_Text _String__Assembler
	ca_DataSize _String__Assembler
	}

func (na *_Tag__Assembler) reset() {
	na.state = maState_initial
	na.s = 0
	na.ca_Object.reset()
	na.ca_TagType.reset()
	na.ca_Tag.reset()
	na.ca_Tagger.reset()
	na.ca_Text.reset()
	na.ca_DataSize.reset()
}

var (
	fieldBit__Tag_Object = 1 << 0
	fieldBit__Tag_TagType = 1 << 1
	fieldBit__Tag_Tag = 1 << 2
	fieldBit__Tag_Tagger = 1 << 3
	fieldBit__Tag_Text = 1 << 4
	fieldBit__Tag_DataSize = 1 << 5
	fieldBits__Tag_sufficient = 0 + 1 << 0 + 1 << 1 + 1 << 2 + 1 << 3 + 1 << 4
)
func (na *_Tag__Assembler) BeginMap(int64) (ipld.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_Tag{}
	}
	return na, nil
}
func (_Tag__Assembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.MapAssembler{"ipldgit.Tag"}.BeginList(0)
}
func (na *_Tag__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{"ipldgit.Tag"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_Tag__Assembler) AssignBool(bool) error {
	return mixins.MapAssembler{"ipldgit.Tag"}.AssignBool(false)
}
func (_Tag__Assembler) AssignInt(int64) error {
	return mixins.MapAssembler{"ipldgit.Tag"}.AssignInt(0)
}
func (_Tag__Assembler) AssignFloat(float64) error {
	return mixins.MapAssembler{"ipldgit.Tag"}.AssignFloat(0)
}
func (_Tag__Assembler) AssignString(string) error {
	return mixins.MapAssembler{"ipldgit.Tag"}.AssignString("")
}
func (_Tag__Assembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{"ipldgit.Tag"}.AssignBytes(nil)
}
func (_Tag__Assembler) AssignLink(ipld.Link) error {
	return mixins.MapAssembler{"ipldgit.Tag"}.AssignLink(nil)
}
func (na *_Tag__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Tag); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != ipld.Kind_Map {
		return ipld.ErrWrongKind{TypeName: "ipldgit.Tag", MethodName: "AssignNode", AppropriateKind: ipld.KindSet_JustMap, ActualKind: v.Kind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_Tag__Assembler) Prototype() ipld.NodePrototype {
	return _Tag__Prototype{}
}
func (ma *_Tag__Assembler) valueFinishTidy() bool {
	switch ma.f {
	case 0:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_Object.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 1:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_TagType.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 2:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_Tag.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 3:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_Tagger.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 4:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_Text.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 5:
		switch ma.w.DataSize.m {
		case schema.Maybe_Value:
			ma.w.DataSize.v = ma.ca_DataSize.w
			ma.state = maState_initial
			return true
		default:
			return false
		}
	default:
		panic("unreachable")
	}
}
func (ma *_Tag__Assembler) AssembleEntry(k string) (ipld.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	switch k {
	case "Object":
		if ma.s & fieldBit__Tag_Object != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__Tag_Object}
		}
		ma.s += fieldBit__Tag_Object
		ma.state = maState_midValue
		ma.f = 0
		ma.ca_Object.w = &ma.w.Object
		ma.ca_Object.m = &ma.cm
		return &ma.ca_Object, nil
	case "TagType":
		if ma.s & fieldBit__Tag_TagType != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__Tag_TagType}
		}
		ma.s += fieldBit__Tag_TagType
		ma.state = maState_midValue
		ma.f = 1
		ma.ca_TagType.w = &ma.w.TagType
		ma.ca_TagType.m = &ma.cm
		return &ma.ca_TagType, nil
	case "Tag":
		if ma.s & fieldBit__Tag_Tag != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__Tag_Tag}
		}
		ma.s += fieldBit__Tag_Tag
		ma.state = maState_midValue
		ma.f = 2
		ma.ca_Tag.w = &ma.w.Tag
		ma.ca_Tag.m = &ma.cm
		return &ma.ca_Tag, nil
	case "Tagger":
		if ma.s & fieldBit__Tag_Tagger != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__Tag_Tagger}
		}
		ma.s += fieldBit__Tag_Tagger
		ma.state = maState_midValue
		ma.f = 3
		ma.ca_Tagger.w = &ma.w.Tagger
		ma.ca_Tagger.m = &ma.cm
		return &ma.ca_Tagger, nil
	case "Text":
		if ma.s & fieldBit__Tag_Text != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__Tag_Text}
		}
		ma.s += fieldBit__Tag_Text
		ma.state = maState_midValue
		ma.f = 4
		ma.ca_Text.w = &ma.w.Text
		ma.ca_Text.m = &ma.cm
		return &ma.ca_Text, nil
	case "DataSize":
		if ma.s & fieldBit__Tag_DataSize != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__Tag_DataSize}
		}
		ma.s += fieldBit__Tag_DataSize
		ma.state = maState_midValue
		ma.f = 5
		ma.ca_DataSize.w = ma.w.DataSize.v
		ma.ca_DataSize.m = &ma.w.DataSize.m
		return &ma.ca_DataSize, nil
	default:
		return nil, ipld.ErrInvalidKey{TypeName:"ipldgit.Tag", Key:&_String{k}}
	}
}
func (ma *_Tag__Assembler) AssembleKey() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_Tag__KeyAssembler)(ma)
}
func (ma *_Tag__Assembler) AssembleValue() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.f {
	case 0:
		ma.ca_Object.w = &ma.w.Object
		ma.ca_Object.m = &ma.cm
		return &ma.ca_Object
	case 1:
		ma.ca_TagType.w = &ma.w.TagType
		ma.ca_TagType.m = &ma.cm
		return &ma.ca_TagType
	case 2:
		ma.ca_Tag.w = &ma.w.Tag
		ma.ca_Tag.m = &ma.cm
		return &ma.ca_Tag
	case 3:
		ma.ca_Tagger.w = &ma.w.Tagger
		ma.ca_Tagger.m = &ma.cm
		return &ma.ca_Tagger
	case 4:
		ma.ca_Text.w = &ma.w.Text
		ma.ca_Text.m = &ma.cm
		return &ma.ca_Text
	case 5:
		ma.ca_DataSize.w = ma.w.DataSize.v
		ma.ca_DataSize.m = &ma.w.DataSize.m
		return &ma.ca_DataSize
	default:
		panic("unreachable")
	}
}
func (ma *_Tag__Assembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	if ma.s & fieldBits__Tag_sufficient != fieldBits__Tag_sufficient {
		err := ipld.ErrMissingRequiredField{Missing: make([]string, 0)}
		if ma.s & fieldBit__Tag_Object == 0 {
			err.Missing = append(err.Missing, "Object")
		}
		if ma.s & fieldBit__Tag_TagType == 0 {
			err.Missing = append(err.Missing, "TagType")
		}
		if ma.s & fieldBit__Tag_Tag == 0 {
			err.Missing = append(err.Missing, "Tag")
		}
		if ma.s & fieldBit__Tag_Tagger == 0 {
			err.Missing = append(err.Missing, "Tagger")
		}
		if ma.s & fieldBit__Tag_Text == 0 {
			err.Missing = append(err.Missing, "Text")
		}
		return err
	}
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_Tag__Assembler) KeyPrototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (ma *_Tag__Assembler) ValuePrototype(k string) ipld.NodePrototype {
	panic("todo structbuilder mapassembler valueprototype")
}
type _Tag__KeyAssembler _Tag__Assembler
func (_Tag__KeyAssembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	return mixins.StringAssembler{"ipldgit.Tag.KeyAssembler"}.BeginMap(0)
}
func (_Tag__KeyAssembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.StringAssembler{"ipldgit.Tag.KeyAssembler"}.BeginList(0)
}
func (na *_Tag__KeyAssembler) AssignNull() error {
	return mixins.StringAssembler{"ipldgit.Tag.KeyAssembler"}.AssignNull()
}
func (_Tag__KeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{"ipldgit.Tag.KeyAssembler"}.AssignBool(false)
}
func (_Tag__KeyAssembler) AssignInt(int64) error {
	return mixins.StringAssembler{"ipldgit.Tag.KeyAssembler"}.AssignInt(0)
}
func (_Tag__KeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{"ipldgit.Tag.KeyAssembler"}.AssignFloat(0)
}
func (ka *_Tag__KeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	switch k {
	case "Object":
		if ka.s & fieldBit__Tag_Object != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__Tag_Object}
		}
		ka.s += fieldBit__Tag_Object
		ka.state = maState_expectValue
		ka.f = 0
	case "TagType":
		if ka.s & fieldBit__Tag_TagType != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__Tag_TagType}
		}
		ka.s += fieldBit__Tag_TagType
		ka.state = maState_expectValue
		ka.f = 1
	case "Tag":
		if ka.s & fieldBit__Tag_Tag != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__Tag_Tag}
		}
		ka.s += fieldBit__Tag_Tag
		ka.state = maState_expectValue
		ka.f = 2
	case "Tagger":
		if ka.s & fieldBit__Tag_Tagger != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__Tag_Tagger}
		}
		ka.s += fieldBit__Tag_Tagger
		ka.state = maState_expectValue
		ka.f = 3
	case "Text":
		if ka.s & fieldBit__Tag_Text != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__Tag_Text}
		}
		ka.s += fieldBit__Tag_Text
		ka.state = maState_expectValue
		ka.f = 4
	case "DataSize":
		if ka.s & fieldBit__Tag_DataSize != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__Tag_DataSize}
		}
		ka.s += fieldBit__Tag_DataSize
		ka.state = maState_expectValue
		ka.f = 5
	default:
		return ipld.ErrInvalidKey{TypeName:"ipldgit.Tag", Key:&_String{k}}
	}
	return nil
}
func (_Tag__KeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{"ipldgit.Tag.KeyAssembler"}.AssignBytes(nil)
}
func (_Tag__KeyAssembler) AssignLink(ipld.Link) error {
	return mixins.StringAssembler{"ipldgit.Tag.KeyAssembler"}.AssignLink(nil)
}
func (ka *_Tag__KeyAssembler) AssignNode(v ipld.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_Tag__KeyAssembler) Prototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (Tag) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n Tag) Representation() ipld.Node {
	return (*_Tag__Repr)(n)
}
type _Tag__Repr _Tag
var (
	fieldName__Tag_Object_serial = _String{"Object"}
	fieldName__Tag_TagType_serial = _String{"TagType"}
	fieldName__Tag_Tag_serial = _String{"Tag"}
	fieldName__Tag_Tagger_serial = _String{"Tagger"}
	fieldName__Tag_Text_serial = _String{"Text"}
	fieldName__Tag_DataSize_serial = _String{"DataSize"}
)
var _ ipld.Node = &_Tag__Repr{}
func (_Tag__Repr) Kind() ipld.Kind {
	return ipld.Kind_Map
}
func (n *_Tag__Repr) LookupByString(key string) (ipld.Node, error) {
	switch key {
	case "Object":
		return n.Object.Representation(), nil
	case "TagType":
		return n.TagType.Representation(), nil
	case "Tag":
		return n.Tag.Representation(), nil
	case "Tagger":
		return n.Tagger.Representation(), nil
	case "Text":
		return n.Text.Representation(), nil
	case "DataSize":
		if n.DataSize.m == schema.Maybe_Absent {
			return ipld.Absent, ipld.ErrNotExists{ipld.PathSegmentOfString(key)}
		}
		return n.DataSize.v.Representation(), nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfString(key)}
	}
}
func (n *_Tag__Repr) LookupByNode(key ipld.Node) (ipld.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (_Tag__Repr) LookupByIndex(idx int64) (ipld.Node, error) {
	return mixins.Map{"ipldgit.Tag.Repr"}.LookupByIndex(0)
}
func (n _Tag__Repr) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return n.LookupByString(seg.String())
}
func (n *_Tag__Repr) MapIterator() ipld.MapIterator {
	end := 6
	if n.DataSize.m == schema.Maybe_Absent {
		end = 5
	} else {
		goto done
	}
done:
	return &_Tag__ReprMapItr{n, 0, end}
}

type _Tag__ReprMapItr struct {
	n   *_Tag__Repr
	idx int
	end int
}

func (itr *_Tag__ReprMapItr) Next() (k ipld.Node, v ipld.Node, _ error) {
advance:if itr.idx >= 6 {
		return nil, nil, ipld.ErrIteratorOverread{}
	}
	switch itr.idx {
	case 0:
		k = &fieldName__Tag_Object_serial
		v = itr.n.Object.Representation()
	case 1:
		k = &fieldName__Tag_TagType_serial
		v = itr.n.TagType.Representation()
	case 2:
		k = &fieldName__Tag_Tag_serial
		v = itr.n.Tag.Representation()
	case 3:
		k = &fieldName__Tag_Tagger_serial
		v = itr.n.Tagger.Representation()
	case 4:
		k = &fieldName__Tag_Text_serial
		v = itr.n.Text.Representation()
	case 5:
		k = &fieldName__Tag_DataSize_serial
		if itr.n.DataSize.m == schema.Maybe_Absent {
			itr.idx++
			goto advance
		}
		v = itr.n.DataSize.v.Representation()
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_Tag__ReprMapItr) Done() bool {
	return itr.idx >= itr.end
}
func (_Tag__Repr) ListIterator() ipld.ListIterator {
	return nil
}
func (rn *_Tag__Repr) Length() int64 {
	l := 6
	if rn.DataSize.m == schema.Maybe_Absent {
		l--
	}
	return int64(l)
}
func (_Tag__Repr) IsAbsent() bool {
	return false
}
func (_Tag__Repr) IsNull() bool {
	return false
}
func (_Tag__Repr) AsBool() (bool, error) {
	return mixins.Map{"ipldgit.Tag.Repr"}.AsBool()
}
func (_Tag__Repr) AsInt() (int64, error) {
	return mixins.Map{"ipldgit.Tag.Repr"}.AsInt()
}
func (_Tag__Repr) AsFloat() (float64, error) {
	return mixins.Map{"ipldgit.Tag.Repr"}.AsFloat()
}
func (_Tag__Repr) AsString() (string, error) {
	return mixins.Map{"ipldgit.Tag.Repr"}.AsString()
}
func (_Tag__Repr) AsBytes() ([]byte, error) {
	return mixins.Map{"ipldgit.Tag.Repr"}.AsBytes()
}
func (_Tag__Repr) AsLink() (ipld.Link, error) {
	return mixins.Map{"ipldgit.Tag.Repr"}.AsLink()
}
func (_Tag__Repr) Prototype() ipld.NodePrototype {
	return _Tag__ReprPrototype{}
}
type _Tag__ReprPrototype struct{}

func (_Tag__ReprPrototype) NewBuilder() ipld.NodeBuilder {
	var nb _Tag__ReprBuilder
	nb.Reset()
	return &nb
}
type _Tag__ReprBuilder struct {
	_Tag__ReprAssembler
}
func (nb *_Tag__ReprBuilder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Tag__ReprBuilder) Reset() {
	var w _Tag
	var m schema.Maybe
	*nb = _Tag__ReprBuilder{_Tag__ReprAssembler{w: &w, m: &m}}
}
type _Tag__ReprAssembler struct {
	w *_Tag
	m *schema.Maybe
	state maState
	s int
	f int

	cm schema.Maybe
	ca_Object _Link__ReprAssembler
	ca_TagType _String__ReprAssembler
	ca_Tag _String__ReprAssembler
	ca_Tagger _PersonInfo__ReprAssembler
	ca_Text _String__ReprAssembler
	ca_DataSize _String__ReprAssembler
	}

func (na *_Tag__ReprAssembler) reset() {
	na.state = maState_initial
	na.s = 0
	na.ca_Object.reset()
	na.ca_TagType.reset()
	na.ca_Tag.reset()
	na.ca_Tagger.reset()
	na.ca_Text.reset()
	na.ca_DataSize.reset()
}
func (na *_Tag__ReprAssembler) BeginMap(int64) (ipld.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_Tag{}
	}
	return na, nil
}
func (_Tag__ReprAssembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.MapAssembler{"ipldgit.Tag.Repr"}.BeginList(0)
}
func (na *_Tag__ReprAssembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{"ipldgit.Tag.Repr.Repr"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_Tag__ReprAssembler) AssignBool(bool) error {
	return mixins.MapAssembler{"ipldgit.Tag.Repr"}.AssignBool(false)
}
func (_Tag__ReprAssembler) AssignInt(int64) error {
	return mixins.MapAssembler{"ipldgit.Tag.Repr"}.AssignInt(0)
}
func (_Tag__ReprAssembler) AssignFloat(float64) error {
	return mixins.MapAssembler{"ipldgit.Tag.Repr"}.AssignFloat(0)
}
func (_Tag__ReprAssembler) AssignString(string) error {
	return mixins.MapAssembler{"ipldgit.Tag.Repr"}.AssignString("")
}
func (_Tag__ReprAssembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{"ipldgit.Tag.Repr"}.AssignBytes(nil)
}
func (_Tag__ReprAssembler) AssignLink(ipld.Link) error {
	return mixins.MapAssembler{"ipldgit.Tag.Repr"}.AssignLink(nil)
}
func (na *_Tag__ReprAssembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Tag); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != ipld.Kind_Map {
		return ipld.ErrWrongKind{TypeName: "ipldgit.Tag.Repr", MethodName: "AssignNode", AppropriateKind: ipld.KindSet_JustMap, ActualKind: v.Kind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_Tag__ReprAssembler) Prototype() ipld.NodePrototype {
	return _Tag__ReprPrototype{}
}
func (ma *_Tag__ReprAssembler) valueFinishTidy() bool {
	switch ma.f {
	case 0:
		switch ma.cm {
		case schema.Maybe_Value:ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 1:
		switch ma.cm {
		case schema.Maybe_Value:ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 2:
		switch ma.cm {
		case schema.Maybe_Value:ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 3:
		switch ma.cm {
		case schema.Maybe_Value:ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 4:
		switch ma.cm {
		case schema.Maybe_Value:ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 5:
		switch ma.w.DataSize.m {
		case schema.Maybe_Value:
			ma.w.DataSize.v = ma.ca_DataSize.w
			ma.state = maState_initial
			return true
		default:
			return false
		}
	default:
		panic("unreachable")
	}
}
func (ma *_Tag__ReprAssembler) AssembleEntry(k string) (ipld.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	switch k {
	case "Object":
		if ma.s & fieldBit__Tag_Object != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__Tag_Object_serial}
		}
		ma.s += fieldBit__Tag_Object
		ma.state = maState_midValue
		ma.f = 0
		ma.ca_Object.w = &ma.w.Object
		ma.ca_Object.m = &ma.cm
		return &ma.ca_Object, nil
	case "TagType":
		if ma.s & fieldBit__Tag_TagType != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__Tag_TagType_serial}
		}
		ma.s += fieldBit__Tag_TagType
		ma.state = maState_midValue
		ma.f = 1
		ma.ca_TagType.w = &ma.w.TagType
		ma.ca_TagType.m = &ma.cm
		return &ma.ca_TagType, nil
	case "Tag":
		if ma.s & fieldBit__Tag_Tag != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__Tag_Tag_serial}
		}
		ma.s += fieldBit__Tag_Tag
		ma.state = maState_midValue
		ma.f = 2
		ma.ca_Tag.w = &ma.w.Tag
		ma.ca_Tag.m = &ma.cm
		return &ma.ca_Tag, nil
	case "Tagger":
		if ma.s & fieldBit__Tag_Tagger != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__Tag_Tagger_serial}
		}
		ma.s += fieldBit__Tag_Tagger
		ma.state = maState_midValue
		ma.f = 3
		ma.ca_Tagger.w = &ma.w.Tagger
		ma.ca_Tagger.m = &ma.cm
		return &ma.ca_Tagger, nil
	case "Text":
		if ma.s & fieldBit__Tag_Text != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__Tag_Text_serial}
		}
		ma.s += fieldBit__Tag_Text
		ma.state = maState_midValue
		ma.f = 4
		ma.ca_Text.w = &ma.w.Text
		ma.ca_Text.m = &ma.cm
		return &ma.ca_Text, nil
	case "DataSize":
		if ma.s & fieldBit__Tag_DataSize != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__Tag_DataSize_serial}
		}
		ma.s += fieldBit__Tag_DataSize
		ma.state = maState_midValue
		ma.f = 5
		ma.ca_DataSize.w = ma.w.DataSize.v
		ma.ca_DataSize.m = &ma.w.DataSize.m
		
		return &ma.ca_DataSize, nil
	default:
		return nil, ipld.ErrInvalidKey{TypeName:"ipldgit.Tag.Repr", Key:&_String{k}}
	}
}
func (ma *_Tag__ReprAssembler) AssembleKey() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_Tag__ReprKeyAssembler)(ma)
}
func (ma *_Tag__ReprAssembler) AssembleValue() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.f {
	case 0:
		ma.ca_Object.w = &ma.w.Object
		ma.ca_Object.m = &ma.cm
		return &ma.ca_Object
	case 1:
		ma.ca_TagType.w = &ma.w.TagType
		ma.ca_TagType.m = &ma.cm
		return &ma.ca_TagType
	case 2:
		ma.ca_Tag.w = &ma.w.Tag
		ma.ca_Tag.m = &ma.cm
		return &ma.ca_Tag
	case 3:
		ma.ca_Tagger.w = &ma.w.Tagger
		ma.ca_Tagger.m = &ma.cm
		return &ma.ca_Tagger
	case 4:
		ma.ca_Text.w = &ma.w.Text
		ma.ca_Text.m = &ma.cm
		return &ma.ca_Text
	case 5:
		ma.ca_DataSize.w = ma.w.DataSize.v
		ma.ca_DataSize.m = &ma.w.DataSize.m
		
		return &ma.ca_DataSize
	default:
		panic("unreachable")
	}
}
func (ma *_Tag__ReprAssembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	if ma.s & fieldBits__Tag_sufficient != fieldBits__Tag_sufficient {
		err := ipld.ErrMissingRequiredField{Missing: make([]string, 0)}
		if ma.s & fieldBit__Tag_Object == 0 {
			err.Missing = append(err.Missing, "Object")
		}
		if ma.s & fieldBit__Tag_TagType == 0 {
			err.Missing = append(err.Missing, "TagType")
		}
		if ma.s & fieldBit__Tag_Tag == 0 {
			err.Missing = append(err.Missing, "Tag")
		}
		if ma.s & fieldBit__Tag_Tagger == 0 {
			err.Missing = append(err.Missing, "Tagger")
		}
		if ma.s & fieldBit__Tag_Text == 0 {
			err.Missing = append(err.Missing, "Text")
		}
		return err
	}
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_Tag__ReprAssembler) KeyPrototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (ma *_Tag__ReprAssembler) ValuePrototype(k string) ipld.NodePrototype {
	panic("todo structbuilder mapassembler repr valueprototype")
}
type _Tag__ReprKeyAssembler _Tag__ReprAssembler
func (_Tag__ReprKeyAssembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	return mixins.StringAssembler{"ipldgit.Tag.Repr.KeyAssembler"}.BeginMap(0)
}
func (_Tag__ReprKeyAssembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.StringAssembler{"ipldgit.Tag.Repr.KeyAssembler"}.BeginList(0)
}
func (na *_Tag__ReprKeyAssembler) AssignNull() error {
	return mixins.StringAssembler{"ipldgit.Tag.Repr.KeyAssembler"}.AssignNull()
}
func (_Tag__ReprKeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{"ipldgit.Tag.Repr.KeyAssembler"}.AssignBool(false)
}
func (_Tag__ReprKeyAssembler) AssignInt(int64) error {
	return mixins.StringAssembler{"ipldgit.Tag.Repr.KeyAssembler"}.AssignInt(0)
}
func (_Tag__ReprKeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{"ipldgit.Tag.Repr.KeyAssembler"}.AssignFloat(0)
}
func (ka *_Tag__ReprKeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	switch k {
	case "Object":
		if ka.s & fieldBit__Tag_Object != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__Tag_Object_serial}
		}
		ka.s += fieldBit__Tag_Object
		ka.state = maState_expectValue
		ka.f = 0
	case "TagType":
		if ka.s & fieldBit__Tag_TagType != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__Tag_TagType_serial}
		}
		ka.s += fieldBit__Tag_TagType
		ka.state = maState_expectValue
		ka.f = 1
	case "Tag":
		if ka.s & fieldBit__Tag_Tag != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__Tag_Tag_serial}
		}
		ka.s += fieldBit__Tag_Tag
		ka.state = maState_expectValue
		ka.f = 2
	case "Tagger":
		if ka.s & fieldBit__Tag_Tagger != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__Tag_Tagger_serial}
		}
		ka.s += fieldBit__Tag_Tagger
		ka.state = maState_expectValue
		ka.f = 3
	case "Text":
		if ka.s & fieldBit__Tag_Text != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__Tag_Text_serial}
		}
		ka.s += fieldBit__Tag_Text
		ka.state = maState_expectValue
		ka.f = 4
	case "DataSize":
		if ka.s & fieldBit__Tag_DataSize != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__Tag_DataSize_serial}
		}
		ka.s += fieldBit__Tag_DataSize
		ka.state = maState_expectValue
		ka.f = 5
	default:
		return ipld.ErrInvalidKey{TypeName:"ipldgit.Tag.Repr", Key:&_String{k}}
	}
	return nil
}
func (_Tag__ReprKeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{"ipldgit.Tag.Repr.KeyAssembler"}.AssignBytes(nil)
}
func (_Tag__ReprKeyAssembler) AssignLink(ipld.Link) error {
	return mixins.StringAssembler{"ipldgit.Tag.Repr.KeyAssembler"}.AssignLink(nil)
}
func (ka *_Tag__ReprKeyAssembler) AssignNode(v ipld.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_Tag__ReprKeyAssembler) Prototype() ipld.NodePrototype {
	return _String__Prototype{}
}

func (n *_Tree) Lookup(idx int64) TreeEntry {
	if n.Length() <= idx {
		return nil
	}
	v := &n.x[idx]
	return v
}
func (n *_Tree) LookupMaybe(idx int64) MaybeTreeEntry {
	if n.Length() <= idx {
		return nil
	}
	v := &n.x[idx]
	return &_TreeEntry__Maybe{
		m: schema.Maybe_Value,
		v: v,
	}
}

var _Tree__valueAbsent = _TreeEntry__Maybe{m:schema.Maybe_Absent}
func (n Tree) Iterator() *Tree__Itr {
	return &Tree__Itr{n, 0}
}

type Tree__Itr struct {
	n Tree
	idx  int
}

func (itr *Tree__Itr) Next() (idx int64, v TreeEntry) {
	if itr.idx >= len(itr.n.x) {
		return -1, nil
	}
	idx = int64(itr.idx)
	v = &itr.n.x[itr.idx]
	itr.idx++
	return
}
func (itr *Tree__Itr) Done() bool {
	return itr.idx >= len(itr.n.x)
}

type _Tree__Maybe struct {
	m schema.Maybe
	v Tree
}
type MaybeTree = *_Tree__Maybe

func (m MaybeTree) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeTree) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeTree) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeTree) AsNode() ipld.Node {
	switch m.m {
		case schema.Maybe_Absent:
			return ipld.Absent
		case schema.Maybe_Null:
			return ipld.Null
		case schema.Maybe_Value:
			return m.v
		default:
			panic("unreachable")
	}
}
func (m MaybeTree) Must() Tree {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}
var _ ipld.Node = (Tree)(&_Tree{})
var _ schema.TypedNode = (Tree)(&_Tree{})
func (Tree) Kind() ipld.Kind {
	return ipld.Kind_List
}
func (Tree) LookupByString(string) (ipld.Node, error) {
	return mixins.List{"ipldgit.Tree"}.LookupByString("")
}
func (n Tree) LookupByNode(k ipld.Node) (ipld.Node, error) {
	idx, err := k.AsInt()
	if err != nil {
		return nil, err
	}
	return n.LookupByIndex(idx)
}
func (n Tree) LookupByIndex(idx int64) (ipld.Node, error) {
	if n.Length() <= idx {
		return nil, ipld.ErrNotExists{ipld.PathSegmentOfInt(idx)}
	}
	v := &n.x[idx]
	return v, nil
}
func (n Tree) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	i, err := seg.Index()
	if err != nil {
		return nil, ipld.ErrInvalidSegmentForList{TypeName: "ipldgit.Tree", TroubleSegment: seg, Reason: err}
	}
	return n.LookupByIndex(i)
}
func (Tree) MapIterator() ipld.MapIterator {
	return nil
}
func (n Tree) ListIterator() ipld.ListIterator {
	return &_Tree__ListItr{n, 0}
}

type _Tree__ListItr struct {
	n Tree
	idx  int
}

func (itr *_Tree__ListItr) Next() (idx int64, v ipld.Node, _ error) {
	if itr.idx >= len(itr.n.x) {
		return -1, nil, ipld.ErrIteratorOverread{}
	}
	idx = int64(itr.idx)
	x := &itr.n.x[itr.idx]
	v = x
	itr.idx++
	return
}
func (itr *_Tree__ListItr) Done() bool {
	return itr.idx >= len(itr.n.x)
}

func (n Tree) Length() int64 {
	return int64(len(n.x))
}
func (Tree) IsAbsent() bool {
	return false
}
func (Tree) IsNull() bool {
	return false
}
func (Tree) AsBool() (bool, error) {
	return mixins.List{"ipldgit.Tree"}.AsBool()
}
func (Tree) AsInt() (int64, error) {
	return mixins.List{"ipldgit.Tree"}.AsInt()
}
func (Tree) AsFloat() (float64, error) {
	return mixins.List{"ipldgit.Tree"}.AsFloat()
}
func (Tree) AsString() (string, error) {
	return mixins.List{"ipldgit.Tree"}.AsString()
}
func (Tree) AsBytes() ([]byte, error) {
	return mixins.List{"ipldgit.Tree"}.AsBytes()
}
func (Tree) AsLink() (ipld.Link, error) {
	return mixins.List{"ipldgit.Tree"}.AsLink()
}
func (Tree) Prototype() ipld.NodePrototype {
	return _Tree__Prototype{}
}
type _Tree__Prototype struct{}

func (_Tree__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _Tree__Builder
	nb.Reset()
	return &nb
}
type _Tree__Builder struct {
	_Tree__Assembler
}
func (nb *_Tree__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Tree__Builder) Reset() {
	var w _Tree
	var m schema.Maybe
	*nb = _Tree__Builder{_Tree__Assembler{w: &w, m: &m}}
}
type _Tree__Assembler struct {
	w *_Tree
	m *schema.Maybe
	state laState

	cm schema.Maybe
	va _TreeEntry__Assembler
}

func (na *_Tree__Assembler) reset() {
	na.state = laState_initial
	na.va.reset()
}
func (_Tree__Assembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	return mixins.ListAssembler{"ipldgit.Tree"}.BeginMap(0)
}
func (na *_Tree__Assembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if sizeHint < 0 {
		sizeHint = 0
	}
	if na.w == nil {
		na.w = &_Tree{}
	}
	if sizeHint > 0 {
		na.w.x = make([]_TreeEntry, 0, sizeHint)
	}
	return na, nil
}
func (na *_Tree__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.ListAssembler{"ipldgit.Tree"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_Tree__Assembler) AssignBool(bool) error {
	return mixins.ListAssembler{"ipldgit.Tree"}.AssignBool(false)
}
func (_Tree__Assembler) AssignInt(int64) error {
	return mixins.ListAssembler{"ipldgit.Tree"}.AssignInt(0)
}
func (_Tree__Assembler) AssignFloat(float64) error {
	return mixins.ListAssembler{"ipldgit.Tree"}.AssignFloat(0)
}
func (_Tree__Assembler) AssignString(string) error {
	return mixins.ListAssembler{"ipldgit.Tree"}.AssignString("")
}
func (_Tree__Assembler) AssignBytes([]byte) error {
	return mixins.ListAssembler{"ipldgit.Tree"}.AssignBytes(nil)
}
func (_Tree__Assembler) AssignLink(ipld.Link) error {
	return mixins.ListAssembler{"ipldgit.Tree"}.AssignLink(nil)
}
func (na *_Tree__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Tree); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != ipld.Kind_List {
		return ipld.ErrWrongKind{TypeName: "ipldgit.Tree", MethodName: "AssignNode", AppropriateKind: ipld.KindSet_JustList, ActualKind: v.Kind()}
	}
	itr := v.ListIterator()
	for !itr.Done() {
		_, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_Tree__Assembler) Prototype() ipld.NodePrototype {
	return _Tree__Prototype{}
}
func (la *_Tree__Assembler) valueFinishTidy() bool {
	switch la.cm {
	case schema.Maybe_Value:
		la.va.w = nil
		la.cm = schema.Maybe_Absent
		la.state = laState_initial
		la.va.reset()
		return true
	default:
		return false
	}
}
func (la *_Tree__Assembler) AssembleValue() ipld.NodeAssembler {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: AssembleValue cannot be called when still in the middle of assembling the previous value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	la.w.x = append(la.w.x, _TreeEntry{})
	la.state = laState_midValue
	row := &la.w.x[len(la.w.x)-1]
	la.va.w = row
	la.va.m = &la.cm
	return &la.va
}
func (la *_Tree__Assembler) Finish() error {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	la.state = laState_finished
	*la.m = schema.Maybe_Value
	return nil
}
func (la *_Tree__Assembler) ValuePrototype(_ int64) ipld.NodePrototype {
	return _TreeEntry__Prototype{}
}
func (Tree) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n Tree) Representation() ipld.Node {
	return (*_Tree__Repr)(n)
}
type _Tree__Repr _Tree
var _ ipld.Node = &_Tree__Repr{}
func (_Tree__Repr) Kind() ipld.Kind {
	return ipld.Kind_List
}
func (_Tree__Repr) LookupByString(string) (ipld.Node, error) {
	return mixins.List{"ipldgit.Tree.Repr"}.LookupByString("")
}
func (nr *_Tree__Repr) LookupByNode(k ipld.Node) (ipld.Node, error) {
	v, err := (Tree)(nr).LookupByNode(k)
	if err != nil || v == ipld.Null {
		return v, err
	}
	return v.(TreeEntry).Representation(), nil
}
func (nr *_Tree__Repr) LookupByIndex(idx int64) (ipld.Node, error) {
	v, err := (Tree)(nr).LookupByIndex(idx)
	if err != nil || v == ipld.Null {
		return v, err
	}
	return v.(TreeEntry).Representation(), nil
}
func (n _Tree__Repr) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	i, err := seg.Index()
	if err != nil {
		return nil, ipld.ErrInvalidSegmentForList{TypeName: "ipldgit.Tree.Repr", TroubleSegment: seg, Reason: err}
	}
	return n.LookupByIndex(i)
}
func (_Tree__Repr) MapIterator() ipld.MapIterator {
	return nil
}
func (nr *_Tree__Repr) ListIterator() ipld.ListIterator {
	return &_Tree__ReprListItr{(Tree)(nr), 0}
}

type _Tree__ReprListItr _Tree__ListItr

func (itr *_Tree__ReprListItr) Next() (idx int64, v ipld.Node, err error) {
	idx, v, err = (*_Tree__ListItr)(itr).Next()
	if err != nil || v == ipld.Null {
		return
	}
	return idx, v.(TreeEntry).Representation(), nil
}
func (itr *_Tree__ReprListItr) Done() bool {
	return (*_Tree__ListItr)(itr).Done()
}

func (rn *_Tree__Repr) Length() int64 {
	return int64(len(rn.x))
}
func (_Tree__Repr) IsAbsent() bool {
	return false
}
func (_Tree__Repr) IsNull() bool {
	return false
}
func (_Tree__Repr) AsBool() (bool, error) {
	return mixins.List{"ipldgit.Tree.Repr"}.AsBool()
}
func (_Tree__Repr) AsInt() (int64, error) {
	return mixins.List{"ipldgit.Tree.Repr"}.AsInt()
}
func (_Tree__Repr) AsFloat() (float64, error) {
	return mixins.List{"ipldgit.Tree.Repr"}.AsFloat()
}
func (_Tree__Repr) AsString() (string, error) {
	return mixins.List{"ipldgit.Tree.Repr"}.AsString()
}
func (_Tree__Repr) AsBytes() ([]byte, error) {
	return mixins.List{"ipldgit.Tree.Repr"}.AsBytes()
}
func (_Tree__Repr) AsLink() (ipld.Link, error) {
	return mixins.List{"ipldgit.Tree.Repr"}.AsLink()
}
func (_Tree__Repr) Prototype() ipld.NodePrototype {
	return _Tree__ReprPrototype{}
}
type _Tree__ReprPrototype struct{}

func (_Tree__ReprPrototype) NewBuilder() ipld.NodeBuilder {
	var nb _Tree__ReprBuilder
	nb.Reset()
	return &nb
}
type _Tree__ReprBuilder struct {
	_Tree__ReprAssembler
}
func (nb *_Tree__ReprBuilder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_Tree__ReprBuilder) Reset() {
	var w _Tree
	var m schema.Maybe
	*nb = _Tree__ReprBuilder{_Tree__ReprAssembler{w: &w, m: &m}}
}
type _Tree__ReprAssembler struct {
	w *_Tree
	m *schema.Maybe
	state laState

	cm schema.Maybe
	va _TreeEntry__ReprAssembler
}

func (na *_Tree__ReprAssembler) reset() {
	na.state = laState_initial
	na.va.reset()
}
func (_Tree__ReprAssembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	return mixins.ListAssembler{"ipldgit.Tree.Repr"}.BeginMap(0)
}
func (na *_Tree__ReprAssembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if sizeHint < 0 {
		sizeHint = 0
	}
	if na.w == nil {
		na.w = &_Tree{}
	}
	if sizeHint > 0 {
		na.w.x = make([]_TreeEntry, 0, sizeHint)
	}
	return na, nil
}
func (na *_Tree__ReprAssembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.ListAssembler{"ipldgit.Tree.Repr.Repr"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_Tree__ReprAssembler) AssignBool(bool) error {
	return mixins.ListAssembler{"ipldgit.Tree.Repr"}.AssignBool(false)
}
func (_Tree__ReprAssembler) AssignInt(int64) error {
	return mixins.ListAssembler{"ipldgit.Tree.Repr"}.AssignInt(0)
}
func (_Tree__ReprAssembler) AssignFloat(float64) error {
	return mixins.ListAssembler{"ipldgit.Tree.Repr"}.AssignFloat(0)
}
func (_Tree__ReprAssembler) AssignString(string) error {
	return mixins.ListAssembler{"ipldgit.Tree.Repr"}.AssignString("")
}
func (_Tree__ReprAssembler) AssignBytes([]byte) error {
	return mixins.ListAssembler{"ipldgit.Tree.Repr"}.AssignBytes(nil)
}
func (_Tree__ReprAssembler) AssignLink(ipld.Link) error {
	return mixins.ListAssembler{"ipldgit.Tree.Repr"}.AssignLink(nil)
}
func (na *_Tree__ReprAssembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_Tree); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != ipld.Kind_List {
		return ipld.ErrWrongKind{TypeName: "ipldgit.Tree.Repr", MethodName: "AssignNode", AppropriateKind: ipld.KindSet_JustList, ActualKind: v.Kind()}
	}
	itr := v.ListIterator()
	for !itr.Done() {
		_, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_Tree__ReprAssembler) Prototype() ipld.NodePrototype {
	return _Tree__ReprPrototype{}
}
func (la *_Tree__ReprAssembler) valueFinishTidy() bool {
	switch la.cm {
	case schema.Maybe_Value:
		la.va.w = nil
		la.cm = schema.Maybe_Absent
		la.state = laState_initial
		la.va.reset()
		return true
	default:
		return false
	}
}
func (la *_Tree__ReprAssembler) AssembleValue() ipld.NodeAssembler {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: AssembleValue cannot be called when still in the middle of assembling the previous value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	la.w.x = append(la.w.x, _TreeEntry{})
	la.state = laState_midValue
	row := &la.w.x[len(la.w.x)-1]
	la.va.w = row
	la.va.m = &la.cm
	return &la.va
}
func (la *_Tree__ReprAssembler) Finish() error {
	switch la.state {
	case laState_initial:
		// carry on
	case laState_midValue:
		if !la.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case laState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	la.state = laState_finished
	*la.m = schema.Maybe_Value
	return nil
}
func (la *_Tree__ReprAssembler) ValuePrototype(_ int64) ipld.NodePrototype {
	return _TreeEntry__ReprPrototype{}
}


func (n _TreeEntry) FieldMode() String {
	return &n.Mode
}
func (n _TreeEntry) FieldName() String {
	return &n.Name
}
func (n _TreeEntry) FieldHash() Link {
	return &n.Hash
}
type _TreeEntry__Maybe struct {
	m schema.Maybe
	v TreeEntry
}
type MaybeTreeEntry = *_TreeEntry__Maybe

func (m MaybeTreeEntry) IsNull() bool {
	return m.m == schema.Maybe_Null
}
func (m MaybeTreeEntry) IsAbsent() bool {
	return m.m == schema.Maybe_Absent
}
func (m MaybeTreeEntry) Exists() bool {
	return m.m == schema.Maybe_Value
}
func (m MaybeTreeEntry) AsNode() ipld.Node {
	switch m.m {
		case schema.Maybe_Absent:
			return ipld.Absent
		case schema.Maybe_Null:
			return ipld.Null
		case schema.Maybe_Value:
			return m.v
		default:
			panic("unreachable")
	}
}
func (m MaybeTreeEntry) Must() TreeEntry {
	if !m.Exists() {
		panic("unbox of a maybe rejected")
	}
	return m.v
}
var (
	fieldName__TreeEntry_Mode = _String{"Mode"}
	fieldName__TreeEntry_Name = _String{"Name"}
	fieldName__TreeEntry_Hash = _String{"Hash"}
)
var _ ipld.Node = (TreeEntry)(&_TreeEntry{})
var _ schema.TypedNode = (TreeEntry)(&_TreeEntry{})
func (TreeEntry) Kind() ipld.Kind {
	return ipld.Kind_Map
}
func (n TreeEntry) LookupByString(key string) (ipld.Node, error) {
	switch key {
	case "Mode":
		return &n.Mode, nil
	case "Name":
		return &n.Name, nil
	case "Hash":
		return &n.Hash, nil
	default:
		return nil, schema.ErrNoSuchField{Type: nil /*TODO*/, Field: ipld.PathSegmentOfString(key)}
	}
}
func (n TreeEntry) LookupByNode(key ipld.Node) (ipld.Node, error) {
	ks, err := key.AsString()
	if err != nil {
		return nil, err
	}
	return n.LookupByString(ks)
}
func (TreeEntry) LookupByIndex(idx int64) (ipld.Node, error) {
	return mixins.Map{"ipldgit.TreeEntry"}.LookupByIndex(0)
}
func (n TreeEntry) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return n.LookupByString(seg.String())
}
func (n TreeEntry) MapIterator() ipld.MapIterator {
	return &_TreeEntry__MapItr{n, 0}
}

type _TreeEntry__MapItr struct {
	n TreeEntry
	idx  int
}

func (itr *_TreeEntry__MapItr) Next() (k ipld.Node, v ipld.Node, _ error) {
	if itr.idx >= 3 {
		return nil, nil, ipld.ErrIteratorOverread{}
	}
	switch itr.idx {
	case 0:
		k = &fieldName__TreeEntry_Mode
		v = &itr.n.Mode
	case 1:
		k = &fieldName__TreeEntry_Name
		v = &itr.n.Name
	case 2:
		k = &fieldName__TreeEntry_Hash
		v = &itr.n.Hash
	default:
		panic("unreachable")
	}
	itr.idx++
	return
}
func (itr *_TreeEntry__MapItr) Done() bool {
	return itr.idx >= 3
}

func (TreeEntry) ListIterator() ipld.ListIterator {
	return nil
}
func (TreeEntry) Length() int64 {
	return 3
}
func (TreeEntry) IsAbsent() bool {
	return false
}
func (TreeEntry) IsNull() bool {
	return false
}
func (TreeEntry) AsBool() (bool, error) {
	return mixins.Map{"ipldgit.TreeEntry"}.AsBool()
}
func (TreeEntry) AsInt() (int64, error) {
	return mixins.Map{"ipldgit.TreeEntry"}.AsInt()
}
func (TreeEntry) AsFloat() (float64, error) {
	return mixins.Map{"ipldgit.TreeEntry"}.AsFloat()
}
func (TreeEntry) AsString() (string, error) {
	return mixins.Map{"ipldgit.TreeEntry"}.AsString()
}
func (TreeEntry) AsBytes() ([]byte, error) {
	return mixins.Map{"ipldgit.TreeEntry"}.AsBytes()
}
func (TreeEntry) AsLink() (ipld.Link, error) {
	return mixins.Map{"ipldgit.TreeEntry"}.AsLink()
}
func (TreeEntry) Prototype() ipld.NodePrototype {
	return _TreeEntry__Prototype{}
}
type _TreeEntry__Prototype struct{}

func (_TreeEntry__Prototype) NewBuilder() ipld.NodeBuilder {
	var nb _TreeEntry__Builder
	nb.Reset()
	return &nb
}
type _TreeEntry__Builder struct {
	_TreeEntry__Assembler
}
func (nb *_TreeEntry__Builder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_TreeEntry__Builder) Reset() {
	var w _TreeEntry
	var m schema.Maybe
	*nb = _TreeEntry__Builder{_TreeEntry__Assembler{w: &w, m: &m}}
}
type _TreeEntry__Assembler struct {
	w *_TreeEntry
	m *schema.Maybe
	state maState
	s int
	f int

	cm schema.Maybe
	ca_Mode _String__Assembler
	ca_Name _String__Assembler
	ca_Hash _Link__Assembler
	}

func (na *_TreeEntry__Assembler) reset() {
	na.state = maState_initial
	na.s = 0
	na.ca_Mode.reset()
	na.ca_Name.reset()
	na.ca_Hash.reset()
}

var (
	fieldBit__TreeEntry_Mode = 1 << 0
	fieldBit__TreeEntry_Name = 1 << 1
	fieldBit__TreeEntry_Hash = 1 << 2
	fieldBits__TreeEntry_sufficient = 0 + 1 << 0 + 1 << 1 + 1 << 2
)
func (na *_TreeEntry__Assembler) BeginMap(int64) (ipld.MapAssembler, error) {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: it makes no sense to 'begin' twice on the same assembler!")
	}
	*na.m = midvalue
	if na.w == nil {
		na.w = &_TreeEntry{}
	}
	return na, nil
}
func (_TreeEntry__Assembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.MapAssembler{"ipldgit.TreeEntry"}.BeginList(0)
}
func (na *_TreeEntry__Assembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.MapAssembler{"ipldgit.TreeEntry"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	case midvalue:
		panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
	}
	panic("unreachable")
}
func (_TreeEntry__Assembler) AssignBool(bool) error {
	return mixins.MapAssembler{"ipldgit.TreeEntry"}.AssignBool(false)
}
func (_TreeEntry__Assembler) AssignInt(int64) error {
	return mixins.MapAssembler{"ipldgit.TreeEntry"}.AssignInt(0)
}
func (_TreeEntry__Assembler) AssignFloat(float64) error {
	return mixins.MapAssembler{"ipldgit.TreeEntry"}.AssignFloat(0)
}
func (_TreeEntry__Assembler) AssignString(string) error {
	return mixins.MapAssembler{"ipldgit.TreeEntry"}.AssignString("")
}
func (_TreeEntry__Assembler) AssignBytes([]byte) error {
	return mixins.MapAssembler{"ipldgit.TreeEntry"}.AssignBytes(nil)
}
func (_TreeEntry__Assembler) AssignLink(ipld.Link) error {
	return mixins.MapAssembler{"ipldgit.TreeEntry"}.AssignLink(nil)
}
func (na *_TreeEntry__Assembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_TreeEntry); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		case midvalue:
			panic("invalid state: cannot assign null into an assembler that's already begun working on recursive structures!")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v.Kind() != ipld.Kind_Map {
		return ipld.ErrWrongKind{TypeName: "ipldgit.TreeEntry", MethodName: "AssignNode", AppropriateKind: ipld.KindSet_JustMap, ActualKind: v.Kind()}
	}
	itr := v.MapIterator()
	for !itr.Done() {
		k, v, err := itr.Next()
		if err != nil {
			return err
		}
		if err := na.AssembleKey().AssignNode(k); err != nil {
			return err
		}
		if err := na.AssembleValue().AssignNode(v); err != nil {
			return err
		}
	}
	return na.Finish()
}
func (_TreeEntry__Assembler) Prototype() ipld.NodePrototype {
	return _TreeEntry__Prototype{}
}
func (ma *_TreeEntry__Assembler) valueFinishTidy() bool {
	switch ma.f {
	case 0:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_Mode.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 1:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_Name.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	case 2:
		switch ma.cm {
		case schema.Maybe_Value:
			ma.ca_Hash.w = nil
			ma.cm = schema.Maybe_Absent
			ma.state = maState_initial
			return true
		default:
			return false
		}
	default:
		panic("unreachable")
	}
}
func (ma *_TreeEntry__Assembler) AssembleEntry(k string) (ipld.NodeAssembler, error) {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleEntry cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleEntry cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleEntry cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleEntry cannot be called on an assembler that's already finished")
	}
	switch k {
	case "Mode":
		if ma.s & fieldBit__TreeEntry_Mode != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__TreeEntry_Mode}
		}
		ma.s += fieldBit__TreeEntry_Mode
		ma.state = maState_midValue
		ma.f = 0
		ma.ca_Mode.w = &ma.w.Mode
		ma.ca_Mode.m = &ma.cm
		return &ma.ca_Mode, nil
	case "Name":
		if ma.s & fieldBit__TreeEntry_Name != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__TreeEntry_Name}
		}
		ma.s += fieldBit__TreeEntry_Name
		ma.state = maState_midValue
		ma.f = 1
		ma.ca_Name.w = &ma.w.Name
		ma.ca_Name.m = &ma.cm
		return &ma.ca_Name, nil
	case "Hash":
		if ma.s & fieldBit__TreeEntry_Hash != 0 {
			return nil, ipld.ErrRepeatedMapKey{&fieldName__TreeEntry_Hash}
		}
		ma.s += fieldBit__TreeEntry_Hash
		ma.state = maState_midValue
		ma.f = 2
		ma.ca_Hash.w = &ma.w.Hash
		ma.ca_Hash.m = &ma.cm
		return &ma.ca_Hash, nil
	default:
		return nil, ipld.ErrInvalidKey{TypeName:"ipldgit.TreeEntry", Key:&_String{k}}
	}
}
func (ma *_TreeEntry__Assembler) AssembleKey() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: AssembleKey cannot be called when in the middle of assembling another key")
	case maState_expectValue:
		panic("invalid state: AssembleKey cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: AssembleKey cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: AssembleKey cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midKey
	return (*_TreeEntry__KeyAssembler)(ma)
}
func (ma *_TreeEntry__Assembler) AssembleValue() ipld.NodeAssembler {
	switch ma.state {
	case maState_initial:
		panic("invalid state: AssembleValue cannot be called when no key is primed")
	case maState_midKey:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		// carry on
	case maState_midValue:
		panic("invalid state: AssembleValue cannot be called when in the middle of assembling another value")
	case maState_finished:
		panic("invalid state: AssembleValue cannot be called on an assembler that's already finished")
	}
	ma.state = maState_midValue
	switch ma.f {
	case 0:
		ma.ca_Mode.w = &ma.w.Mode
		ma.ca_Mode.m = &ma.cm
		return &ma.ca_Mode
	case 1:
		ma.ca_Name.w = &ma.w.Name
		ma.ca_Name.m = &ma.cm
		return &ma.ca_Name
	case 2:
		ma.ca_Hash.w = &ma.w.Hash
		ma.ca_Hash.m = &ma.cm
		return &ma.ca_Hash
	default:
		panic("unreachable")
	}
}
func (ma *_TreeEntry__Assembler) Finish() error {
	switch ma.state {
	case maState_initial:
		// carry on
	case maState_midKey:
		panic("invalid state: Finish cannot be called when in the middle of assembling a key")
	case maState_expectValue:
		panic("invalid state: Finish cannot be called when expecting start of value assembly")
	case maState_midValue:
		if !ma.valueFinishTidy() {
			panic("invalid state: Finish cannot be called when in the middle of assembling a value")
		} // if tidy success: carry on
	case maState_finished:
		panic("invalid state: Finish cannot be called on an assembler that's already finished")
	}
	if ma.s & fieldBits__TreeEntry_sufficient != fieldBits__TreeEntry_sufficient {
		err := ipld.ErrMissingRequiredField{Missing: make([]string, 0)}
		if ma.s & fieldBit__TreeEntry_Mode == 0 {
			err.Missing = append(err.Missing, "Mode")
		}
		if ma.s & fieldBit__TreeEntry_Name == 0 {
			err.Missing = append(err.Missing, "Name")
		}
		if ma.s & fieldBit__TreeEntry_Hash == 0 {
			err.Missing = append(err.Missing, "Hash")
		}
		return err
	}
	ma.state = maState_finished
	*ma.m = schema.Maybe_Value
	return nil
}
func (ma *_TreeEntry__Assembler) KeyPrototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (ma *_TreeEntry__Assembler) ValuePrototype(k string) ipld.NodePrototype {
	panic("todo structbuilder mapassembler valueprototype")
}
type _TreeEntry__KeyAssembler _TreeEntry__Assembler
func (_TreeEntry__KeyAssembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	return mixins.StringAssembler{"ipldgit.TreeEntry.KeyAssembler"}.BeginMap(0)
}
func (_TreeEntry__KeyAssembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.StringAssembler{"ipldgit.TreeEntry.KeyAssembler"}.BeginList(0)
}
func (na *_TreeEntry__KeyAssembler) AssignNull() error {
	return mixins.StringAssembler{"ipldgit.TreeEntry.KeyAssembler"}.AssignNull()
}
func (_TreeEntry__KeyAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{"ipldgit.TreeEntry.KeyAssembler"}.AssignBool(false)
}
func (_TreeEntry__KeyAssembler) AssignInt(int64) error {
	return mixins.StringAssembler{"ipldgit.TreeEntry.KeyAssembler"}.AssignInt(0)
}
func (_TreeEntry__KeyAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{"ipldgit.TreeEntry.KeyAssembler"}.AssignFloat(0)
}
func (ka *_TreeEntry__KeyAssembler) AssignString(k string) error {
	if ka.state != maState_midKey {
		panic("misuse: KeyAssembler held beyond its valid lifetime")
	}
	switch k {
	case "Mode":
		if ka.s & fieldBit__TreeEntry_Mode != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__TreeEntry_Mode}
		}
		ka.s += fieldBit__TreeEntry_Mode
		ka.state = maState_expectValue
		ka.f = 0
	case "Name":
		if ka.s & fieldBit__TreeEntry_Name != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__TreeEntry_Name}
		}
		ka.s += fieldBit__TreeEntry_Name
		ka.state = maState_expectValue
		ka.f = 1
	case "Hash":
		if ka.s & fieldBit__TreeEntry_Hash != 0 {
			return ipld.ErrRepeatedMapKey{&fieldName__TreeEntry_Hash}
		}
		ka.s += fieldBit__TreeEntry_Hash
		ka.state = maState_expectValue
		ka.f = 2
	default:
		return ipld.ErrInvalidKey{TypeName:"ipldgit.TreeEntry", Key:&_String{k}}
	}
	return nil
}
func (_TreeEntry__KeyAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{"ipldgit.TreeEntry.KeyAssembler"}.AssignBytes(nil)
}
func (_TreeEntry__KeyAssembler) AssignLink(ipld.Link) error {
	return mixins.StringAssembler{"ipldgit.TreeEntry.KeyAssembler"}.AssignLink(nil)
}
func (ka *_TreeEntry__KeyAssembler) AssignNode(v ipld.Node) error {
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return ka.AssignString(v2)
	}
}
func (_TreeEntry__KeyAssembler) Prototype() ipld.NodePrototype {
	return _String__Prototype{}
}
func (TreeEntry) Type() schema.Type {
	return nil /*TODO:typelit*/
}
func (n TreeEntry) Representation() ipld.Node {
	return (*_TreeEntry__Repr)(n)
}
type _TreeEntry__Repr _TreeEntry
var _ ipld.Node = &_TreeEntry__Repr{}
func (_TreeEntry__Repr) Kind() ipld.Kind {
	return ipld.Kind_String
}
func (_TreeEntry__Repr) LookupByString(string) (ipld.Node, error) {
	return mixins.String{"ipldgit.TreeEntry.Repr"}.LookupByString("")
}
func (_TreeEntry__Repr) LookupByNode(ipld.Node) (ipld.Node, error) {
	return mixins.String{"ipldgit.TreeEntry.Repr"}.LookupByNode(nil)
}
func (_TreeEntry__Repr) LookupByIndex(idx int64) (ipld.Node, error) {
	return mixins.String{"ipldgit.TreeEntry.Repr"}.LookupByIndex(0)
}
func (_TreeEntry__Repr) LookupBySegment(seg ipld.PathSegment) (ipld.Node, error) {
	return mixins.String{"ipldgit.TreeEntry.Repr"}.LookupBySegment(seg)
}
func (_TreeEntry__Repr) MapIterator() ipld.MapIterator {
	return nil
}
func (_TreeEntry__Repr) ListIterator() ipld.ListIterator {
	return nil
}
func (_TreeEntry__Repr) Length() int64 {
	return -1
}
func (_TreeEntry__Repr) IsAbsent() bool {
	return false
}
func (_TreeEntry__Repr) IsNull() bool {
	return false
}
func (_TreeEntry__Repr) AsBool() (bool, error) {
	return mixins.String{"ipldgit.TreeEntry.Repr"}.AsBool()
}
func (_TreeEntry__Repr) AsInt() (int64, error) {
	return mixins.String{"ipldgit.TreeEntry.Repr"}.AsInt()
}
func (_TreeEntry__Repr) AsFloat() (float64, error) {
	return mixins.String{"ipldgit.TreeEntry.Repr"}.AsFloat()
}
func (n *_TreeEntry__Repr) AsString() (string, error) {
	return n.String(), nil
}
func (n *_TreeEntry__Repr) String() string {
	return (*_String__Repr)(&n.Mode).String() + " " + (*_String__Repr)(&n.Name).String() + " " + (*_Link__Repr)(&n.Hash).String()
}
func (n TreeEntry) String() string {
	return (*_TreeEntry__Repr)(n).String()
}
func (_TreeEntry__Repr) AsBytes() ([]byte, error) {
	return mixins.String{"ipldgit.TreeEntry.Repr"}.AsBytes()
}
func (_TreeEntry__Repr) AsLink() (ipld.Link, error) {
	return mixins.String{"ipldgit.TreeEntry.Repr"}.AsLink()
}
func (_TreeEntry__Repr) Prototype() ipld.NodePrototype {
	return _TreeEntry__ReprPrototype{}
}
type _TreeEntry__ReprPrototype struct{}

func (_TreeEntry__ReprPrototype) NewBuilder() ipld.NodeBuilder {
	var nb _TreeEntry__ReprBuilder
	nb.Reset()
	return &nb
}
type _TreeEntry__ReprBuilder struct {
	_TreeEntry__ReprAssembler
}
func (nb *_TreeEntry__ReprBuilder) Build() ipld.Node {
	if *nb.m != schema.Maybe_Value {
		panic("invalid state: cannot call Build on an assembler that's not finished")
	}
	return nb.w
}
func (nb *_TreeEntry__ReprBuilder) Reset() {
	var w _TreeEntry
	var m schema.Maybe
	*nb = _TreeEntry__ReprBuilder{_TreeEntry__ReprAssembler{w: &w, m: &m}}
}
func (_TreeEntry__ReprPrototype) fromString(w *_TreeEntry, v string) error {
	ss, err := mixins.SplitExact(v, " ", 3)
	if err != nil {
		return ipld.ErrUnmatchable{TypeName:"ipldgit.TreeEntry.Repr", Reason: err}
	}
	if err := (_String__ReprPrototype{}).fromString(&w.Mode, ss[0]); err != nil {
		return ipld.ErrUnmatchable{TypeName:"ipldgit.TreeEntry.Repr", Reason: err}
	}
	if err := (_String__ReprPrototype{}).fromString(&w.Name, ss[1]); err != nil {
		return ipld.ErrUnmatchable{TypeName:"ipldgit.TreeEntry.Repr", Reason: err}
	}
	if err := (_Link__ReprPrototype{}).fromString(&w.Hash, ss[2]); err != nil {
		return ipld.ErrUnmatchable{TypeName:"ipldgit.TreeEntry.Repr", Reason: err}
	}
	return nil
}
type _TreeEntry__ReprAssembler struct {
	w *_TreeEntry
	m *schema.Maybe
}

func (na *_TreeEntry__ReprAssembler) reset() {}
func (_TreeEntry__ReprAssembler) BeginMap(sizeHint int64) (ipld.MapAssembler, error) {
	return mixins.StringAssembler{"ipldgit.TreeEntry.Repr"}.BeginMap(0)
}
func (_TreeEntry__ReprAssembler) BeginList(sizeHint int64) (ipld.ListAssembler, error) {
	return mixins.StringAssembler{"ipldgit.TreeEntry.Repr"}.BeginList(0)
}
func (na *_TreeEntry__ReprAssembler) AssignNull() error {
	switch *na.m {
	case allowNull:
		*na.m = schema.Maybe_Null
		return nil
	case schema.Maybe_Absent:
		return mixins.StringAssembler{"ipldgit.TreeEntry.Repr.Repr"}.AssignNull()
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	panic("unreachable")
}
func (_TreeEntry__ReprAssembler) AssignBool(bool) error {
	return mixins.StringAssembler{"ipldgit.TreeEntry.Repr"}.AssignBool(false)
}
func (_TreeEntry__ReprAssembler) AssignInt(int64) error {
	return mixins.StringAssembler{"ipldgit.TreeEntry.Repr"}.AssignInt(0)
}
func (_TreeEntry__ReprAssembler) AssignFloat(float64) error {
	return mixins.StringAssembler{"ipldgit.TreeEntry.Repr"}.AssignFloat(0)
}
func (na *_TreeEntry__ReprAssembler) AssignString(v string) error {
	switch *na.m {
	case schema.Maybe_Value, schema.Maybe_Null:
		panic("invalid state: cannot assign into assembler that's already finished")
	}
	if na.w == nil {
		na.w = &_TreeEntry{}
	}
	if err := (_TreeEntry__ReprPrototype{}).fromString(na.w, v); err != nil {
		return err
	}
	*na.m = schema.Maybe_Value
	return nil
}
func (_TreeEntry__ReprAssembler) AssignBytes([]byte) error {
	return mixins.StringAssembler{"ipldgit.TreeEntry.Repr"}.AssignBytes(nil)
}
func (_TreeEntry__ReprAssembler) AssignLink(ipld.Link) error {
	return mixins.StringAssembler{"ipldgit.TreeEntry.Repr"}.AssignLink(nil)
}
func (na *_TreeEntry__ReprAssembler) AssignNode(v ipld.Node) error {
	if v.IsNull() {
		return na.AssignNull()
	}
	if v2, ok := v.(*_TreeEntry); ok {
		switch *na.m {
		case schema.Maybe_Value, schema.Maybe_Null:
			panic("invalid state: cannot assign into assembler that's already finished")
		}
		if na.w == nil {
			na.w = v2
			*na.m = schema.Maybe_Value
			return nil
		}
		*na.w = *v2
		*na.m = schema.Maybe_Value
		return nil
	}
	if v2, err := v.AsString(); err != nil {
		return err
	} else {
		return na.AssignString(v2)
	}
}
func (_TreeEntry__ReprAssembler) Prototype() ipld.NodePrototype {
	return _TreeEntry__ReprPrototype{}
}

