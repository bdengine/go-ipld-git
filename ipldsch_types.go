package ipldgit

// Code generated by go-ipld-prime gengo.  DO NOT EDIT.

import (
	ipld "github.com/ipld/go-ipld-prime"
)

var _ ipld.Node = nil // suppress errors when this dependency is not referenced
// Type is a struct embeding a NodePrototype/Type for every Node implementation in this package.
// One of its major uses is to start the construction of a value.
// You can use it like this:
//
// 		ipldgit.Type.YourTypeName.NewBuilder().BeginMap() //...
//
// and:
//
// 		ipldgit.Type.OtherTypeName.NewBuilder().AssignString("x") // ...
//
var Type typeSlab

type typeSlab struct {
	Blob              _Blob__Prototype
	Blob__Repr        _Blob__ReprPrototype
	Commit            _Commit__Prototype
	Commit__Repr      _Commit__ReprPrototype
	GpgSig            _GpgSig__Prototype
	GpgSig__Repr      _GpgSig__ReprPrototype
	Link              _Link__Prototype
	Link__Repr        _Link__ReprPrototype
	LinkCommit        _LinkCommit__Prototype
	LinkCommit__Repr  _LinkCommit__ReprPrototype
	LinkTree          _LinkTree__Prototype
	LinkTree__Repr    _LinkTree__ReprPrototype
	ListParents       _ListParents__Prototype
	ListParents__Repr _ListParents__ReprPrototype
	ListString        _ListString__Prototype
	ListString__Repr  _ListString__ReprPrototype
	ListTag           _ListTag__Prototype
	ListTag__Repr     _ListTag__ReprPrototype
	PersonInfo        _PersonInfo__Prototype
	PersonInfo__Repr  _PersonInfo__ReprPrototype
	String            _String__Prototype
	String__Repr      _String__ReprPrototype
	Tag               _Tag__Prototype
	Tag__Repr         _Tag__ReprPrototype
	Tree              _Tree__Prototype
	Tree__Repr        _Tree__ReprPrototype
	TreeEntry         _TreeEntry__Prototype
	TreeEntry__Repr   _TreeEntry__ReprPrototype
}

// --- type definitions follow ---

// Blob matches the IPLD Schema type "Blob".  It has bytes kind.
type Blob = *_Blob
type _Blob struct{ x []byte }

// Commit matches the IPLD Schema type "Commit".  It has Struct type-kind, and may be interrogated like map kind.
type Commit = *_Commit
type _Commit struct {
	tree      _LinkTree
	parents   _ListParents
	message   _String
	author    _PersonInfo__Maybe
	committer _PersonInfo__Maybe
	encoding  _String__Maybe
	signature _GpgSig__Maybe
	mergeTag  _ListTag
	other     _ListString
}

// GpgSig matches the IPLD Schema type "GpgSig".  It has string kind.
type GpgSig = *_GpgSig
type _GpgSig struct{ x string }

// Link matches the IPLD Schema type "Link".  It has link kind.
type Link = *_Link
type _Link struct{ x ipld.Link }

// LinkCommit matches the IPLD Schema type "LinkCommit".  It has link kind.
type LinkCommit = *_LinkCommit
type _LinkCommit struct{ x ipld.Link }

// LinkTree matches the IPLD Schema type "LinkTree".  It has link kind.
type LinkTree = *_LinkTree
type _LinkTree struct{ x ipld.Link }

// ListParents matches the IPLD Schema type "ListParents".  It has list kind.
type ListParents = *_ListParents
type _ListParents struct {
	x []_LinkCommit
}

// ListString matches the IPLD Schema type "ListString".  It has list kind.
type ListString = *_ListString
type _ListString struct {
	x []_String
}

// ListTag matches the IPLD Schema type "ListTag".  It has list kind.
type ListTag = *_ListTag
type _ListTag struct {
	x []_Tag
}

// PersonInfo matches the IPLD Schema type "PersonInfo".  It has Struct type-kind, and may be interrogated like map kind.
type PersonInfo = *_PersonInfo
type _PersonInfo struct {
	name     _String
	email    _String
	date     _String
	timezone _String
}

// String matches the IPLD Schema type "String".  It has string kind.
type String = *_String
type _String struct{ x string }

// Tag matches the IPLD Schema type "Tag".  It has Struct type-kind, and may be interrogated like map kind.
type Tag = *_Tag
type _Tag struct {
	object  _Link
	tagType _String
	tag     _String
	tagger  _PersonInfo
	text    _String
}

// Tree matches the IPLD Schema type "Tree".  It has map kind.
type Tree = *_Tree
type _Tree struct {
	m map[_String]*_TreeEntry
	t []_Tree__entry
}
type _Tree__entry struct {
	k _String
	v _TreeEntry
}

// TreeEntry matches the IPLD Schema type "TreeEntry".  It has Struct type-kind, and may be interrogated like map kind.
type TreeEntry = *_TreeEntry
type _TreeEntry struct {
	mode _String
	hash _Link
}
